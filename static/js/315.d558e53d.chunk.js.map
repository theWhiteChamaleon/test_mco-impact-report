{"version":3,"file":"static/js/315.d558e53d.chunk.js","mappings":"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","sources":["services/api/refreshService.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","components/DragAndDrop/DragAndDrop.jsx","services/api/PlantAssignment/saveTableDataService.js","components/Popup/Popup.jsx","pages/BOSWidget/MassUpdateDropdown.jsx","pages/BOSWidget/BOSWidgetToolbarNativeCta.jsx","pages/BOSWidget/BOSWidget.jsx","pages/BOSWidget/BOSdataHelpers.js","pages/BOSWidget/WidgetLifecycle.jsx","pages/BOSWidget/bosIndex.js"],"sourcesContent":["export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst BOSWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button>\r\n      </div>\r\n\r\n      {/* Dropdown appears below */}\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BOSWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./BOSWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./BOSdataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\nimport BOSWidgetToolbarNativeCta from \"./BOSWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst BOSWidget = () => {\r\n  const { initializeDroppableArea, loading } = useBOSDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n        // SpecState need to be added.\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n        // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n        // something needs to be done here\r\n        // [ChildStateKey]:\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"bosWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <BOSWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"Bos_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BOSWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useBOSDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport BOSWidget from \"./BOSWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <BOSWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["refreshWidgetData","async","dataItems","handleDrop","console","log","length","Error","error","warn","_ref","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","className","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","isDragging","style","opacity","position","top","CSS","Transform","toString","transition","width","getSize","zIndex","cursor","backgroundColor","_jsxs","ref","children","_jsx","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","widgetType","data","editable","meta","type","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","_Fragment","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","DragAndDropComponent","useDroppableArea","performSearch","useInterComSearch","Image","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","extractIdsFromTitles","allPlants","newClasses","item","itemTitle","replace","matchedPlant","find","plant","toLowerCase","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","handleAddData","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","identifier","action","ErrorObject","classId","missingIn","child","name","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","body","method","Promise","resolve","reject","authenticatedRequest","onComplete","response","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Array","isArray","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl","forwardRef","addedItem","CAName","showWarningToast","useToast","addPlant","selectedItems","MSG_EMPTYADD_ERROR","useImperativeHandle","maxHeight","editableColumns","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","val","onSave","onMassUpdate","showDropdown","setShowDropdown","handleSaveClick","MSG_BOS_SAVE","prev","MassUpdateDropdown","handleMassUpdate","scope","BOSWidget","initializeDroppableArea","loading","useBOSDropableArea","tableKey","setTableKey","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","setSelectableRows","showSuccessToast","showErrorToast","selectedTableRows","useSelector","droppedObject","droppedObjectData","loadingParentDetails","plantObjectData","isDropped","bosData","BOSObjectData","bosSpecDocument","specDocument","newDataWithChanges","newItem","originalItem","oldItem","Title","Revision","key","prevKey","cardData","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","newTableData","getTableData","rowData","childTitle","childRevision","State","childState","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","childLatest","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","columnKey","_table$options$meta","updatedValue","options","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","BOSWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecName","Name","SpecRevision","SpecState","SpecID","ItemName","ItemRevision","ItemState","ItemID","formattedData","matchingData","ID","sort","a","b","localeCompare","Number","status","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","WidgetLifecycle","setLoading","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","stack","userClickedRefresh","sessionStorage","line","isAutoTriggeredRefresh","latestDraggedData","store","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","document","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}