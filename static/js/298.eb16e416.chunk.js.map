{"version":3,"file":"static/js/298.eb16e416.chunk.js","mappings":"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","sources":["services/api/refreshService.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["refreshWidgetData","async","dataItems","handleDrop","console","log","length","Error","error","warn","_ref","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","className","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","isDragging","style","opacity","position","top","CSS","Transform","toString","transition","width","getSize","zIndex","cursor","backgroundColor","_jsxs","ref","children","_jsx","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","widgetType","data","editable","meta","type","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","_Fragment","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","WidgetLifecycle","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","stack","userClickedRefresh","sessionStorage","line","isAutoTriggeredRefresh","latestDraggedData","store","droppedObject","droppedObjectData","initialDraggedData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","PlantName","PlantERPStatus","AiOutlineClose","marginLeft","PlantID","getTableData","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","_availablePlantRef$cu","addPlant","AvailablePlant","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","FontAwesomeIcon","icon","faRotateLeft","PlantAssignment","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","securityContext1","useCallback","plantId","item","extractPlantData","plantData","itemName","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","find","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","flexDirection","justifyContent","DragAndDropComponent","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}