{"version":3,"file":"static/js/909.1732726e.chunk.js","mappings":"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","sources":["services/api/refreshService.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","components/DragAndDrop/DragAndDrop.jsx","pages/revisionFloat/dataHelpers.js","WidgetLifecycle-munish.jsx","pages/revisionFloat/revisionFloatToolbarNativeCta.jsx","utils/getUserEmail.js","pages/revisionFloat/revisionFloat.jsx","index.js"],"sourcesContent":["export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","// pages/revisionFloat/dataHelpers.js\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CheckmarkCell = () => (\r\n  <FontAwesomeIcon icon={faCheck} className=\"green-icon\" />\r\n);\r\n\r\nconst CrossmarkCell = () => (\r\n  <FontAwesomeIcon icon={faXmark} className=\"cross-icon\" />\r\n);\r\n\r\nexport const getCardData = (cardData) => {\r\n  if (!cardData || typeof cardData !== \"object\") {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: cardData.Title || \"N/A\",\r\n    type: cardData.Type || \"N/A\",\r\n    \"Maturity State\": cardData[\"Maturity State\"] || \"N/A\",\r\n    owner: cardData.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": cardData[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: cardData.Description || \"N/A\",\r\n    \"Dropped Revision\": cardData[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": cardData[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": cardData[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      cardData.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n    ...(cardData.Type !== \"Document\" && {\r\n      EIN: cardData.EIN || \"N/A\",\r\n      \"CAD Format\": cardData[\"CAD Format\"] || \"N/A\",\r\n    }),\r\n  };\r\n};\r\n\r\nexport const getTableData = (parentDetails, cardData) => {\r\n  if (!parentDetails || !Array.isArray(parentDetails.data)) {\r\n    console.warn(\"[getTableData] ⚠️ No parent details available. Returning empty array.\");\r\n    return [];\r\n  }\r\n  return parentDetails.data.map((parent) => ({\r\n    EIN: parent.EIN || \"N/A\",\r\n    Title: parent.Title || \"N/A\",\r\n    Description: parent.Description || \"N/A\",\r\n    Type: parent.Type || \"N/A\",\r\n    Revision: parent[\"Dropped Revision\"] || \"N/A\",\r\n    \"Dropped Revision ID\": parent[\"Dropped Revision ID\"] || \"N/A\",\r\n    \"Connected Child Revision\": parent.connectedChildRev || \"N/A\",\r\n    \"Latest child connected\": parent.toBeChildRevConnected ? false : true,\r\n    \"To-Be child connected\": parent.toBeChildRevConnected || \"-\",\r\n    State: parent[\"Maturity State\"] || \"N/A\",\r\n    Owner: parent.Owner || \"N/A\",\r\n    \"CAD Format\": parent[\"CAD Format\"] || \"N/A\",\r\n    Collabspace: parent[\"Collaborative Space Title\"] || \"N/A\",\r\n\r\n    // Add relationship field if the type is Document\r\n    ...(cardData?.Type === \"Document\" && {\r\n      relationship: parent.relationship || \"N/A\",\r\n    }),\r\n  }));\r\n};\r\n\r\nexport const tableColumns = [\r\n  {\r\n    accessorKey: \"EIN\",\r\n    header: \"EIN\",\r\n    columnPinning: true,\r\n  },\r\n  { accessorKey: \"Title\", header: \"Title\" },\r\n  { accessorKey: \"Description\", header: \"Description\" },\r\n  { accessorKey: \"Type\", header: \"Type\" },\r\n  { accessorKey: \"Revision\", header: \"Revision\" },\r\n  {\r\n    accessorKey: \"Connected Child Revision\",\r\n    header: \"Connected Revision\",\r\n  },\r\n  {\r\n    accessorKey: \"Latest child connected\",\r\n    header: \"latest Revision Connected\",\r\n    cell: ({ cell }) => {\r\n      const value = cell.getValue();\r\n      // Render a checkmark if true, a cross if false\r\n      return value ? <CheckmarkCell /> : <CrossmarkCell />;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"To-Be child connected\",\r\n    header: \"Revision to-be Connected\",\r\n  },\r\n  {\r\n    accessorKey: \"relationship\",\r\n    header: \"Relationship\",\r\n  },\r\n  { accessorKey: \"State\", header: \"State\" },\r\n  { accessorKey: \"Owner\", header: \"Owner\" },\r\n  { accessorKey: \"CAD Format\", header: \"CAD Format\" },\r\n  { accessorKey: \"Collabspace\", header: \"Collabspace\" },\r\n];\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"./services/api/refreshService\";\r\nimport useToast from \"./hooks/useToast\";\r\nimport useDroppableArea from \"./hooks/useDroppableArea\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"./utils/toastMessages\";\r\nimport store from \"./store\"; // ✅ Import Redux store directly\r\nimport Loader from \"./components/Loader/Loader\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useDroppableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useRevisions from \"../../hooks/useRevisions\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_NO_ROWS, MSG_NO_REPLACE } from \"../../utils/toastMessages\";\r\nimport getUserEmail from \"../../utils/getUserEmail\";\r\nimport WidgetLifecycle from \"../../WidgetLifecycle-munish\";\r\n\r\n\r\nconst RevisionFloatToolbarNativeCta = () => {\r\n  const { replaceRevisions } = useRevisions();\r\n  const { showErrorToast } = useToast();\r\n  // Access relevant data from Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  ); // Assuming you're storing selected rows in Redux\r\n\r\n  // console.log(\"selectedTableRows\", selectedTableRows);\r\n\r\n  const handleReplace = async () => {\r\n    if (!selectedTableRows || selectedTableRows.length === 0) {\r\n      showErrorToast(MSG_NO_ROWS);\r\n      return;\r\n    }\r\n\r\n    // Get the parentDetails from droppedObjectData\r\n    const allParents = droppedObjectData.parentDetails?.data;\r\n    if (!allParents || allParents.length === 0) {\r\n      showErrorToast(\"No parent details available.\");\r\n      return;\r\n    }\r\n\r\n    // Filter selected rows where 'To-Be child connected' is not \"-\"\r\n    const selectedRows = selectedTableRows.filter(\r\n      (row) => row[\"To-Be child connected\"] !== \"-\"\r\n    );\r\n\r\n    if (selectedRows.length === 0) {\r\n      showErrorToast(MSG_NO_REPLACE);\r\n      return;\r\n    }\r\n\r\n    // Map selectedRows to their corresponding parent objects\r\n    const selectedParents = selectedRows.map((row) => {\r\n      return allParents.find(\r\n        (parent) => parent[\"Dropped Revision ID\"] === row[\"Dropped Revision ID\"]\r\n      );\r\n    });\r\n\r\n    // Check if any matching parent is not found\r\n    if (selectedParents.some((parent) => !parent)) {\r\n      showErrorToast(\"Could not find all corresponding parent details.\");\r\n      return;\r\n    }\r\n\r\n    const userEmail = await getUserEmail();\r\n    if (!userEmail) {\r\n      throw new Error(\"User email not found.\");\r\n    }\r\n\r\n    const droppedData = droppedObjectData.cardData;\r\n\r\n    // Call the replaceRevisions function from useRevisions hook\r\n    const result = await replaceRevisions(\r\n      selectedParents,\r\n      droppedData,\r\n      userEmail\r\n    );\r\n    \r\n\r\n    if (result.success) {\r\n      // Handle success (e.g., show a success message, refetch data, etc.)\r\n    } else {\r\n      // Handle error (e.g., show an error message)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\"Replace\"\r\n        onClick={handleReplace}\r\n      />\r\n      {/* <WidgetLifecycle /> */}\r\n      \r\n\r\n      {/* <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\" Select items in my Collaborative Space\"\r\n        // onClick={\"\"}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevisionFloatToolbarNativeCta;\r\n","// utils/getUserEmail.js\r\nimport { loadPlatformAPI } from \"./helpers\"; \r\n\r\nexport default async function getUserEmail() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n\r\n    return user.email;\r\n  } catch (error) {\r\n    console.error(\"Error getting user email:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}","import React, { useEffect, useMemo, useRef, useCallback } from \"react\";\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./dataHelpers\";\r\nimport RevisionFloatToolbarNativeCta from \"./revisionFloatToolbarNativeCta\";\r\n\r\nconst RevisionFloat = () => {\r\n  const { initializeDroppableArea, loading } = useDroppableArea();\r\n  const tableKey = useRef(0); // ✅ Use useRef instead of useState\r\n  const dispatch = useDispatch();\r\n\r\n  // console.log(\"[RevisionFloat] 🎯 Component Rendered\");\r\n  // ✅ Use shallowEqual to prevent unnecessary re-renders\r\n  const { cardData, parentDetails, isDropped, initialDraggedData } =\r\n    useSelector(\r\n      (state) => ({\r\n        cardData: state.droppedObject.droppedObjectData.cardData,\r\n        parentDetails: state.droppedObject.droppedObjectData.parentDetails,\r\n        isDropped: state.droppedObject.isDropped,\r\n        initialDraggedData:\r\n          state.droppedObject.droppedObjectData.initialDraggedData,\r\n      }),\r\n      shallowEqual // ✅ Ensures Redux only re-renders when values actually change\r\n    );\r\n  // console.log(\"[RevisionFloat] 🏪 Redux State - cardData:\", cardData);\r\n  // console.log(\"[RevisionFloat] 🏪 Redux State - parentDetails:\", parentDetails);\r\n\r\n  // ✅ Ensure droppable area is only initialized **once**\r\n  const hasInitializedDroppable = useRef(false);\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[RevisionFloat] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Ensure it runs only once\r\n    }\r\n  }, [initializeDroppableArea]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!isDropped) {\r\n  //     initializeDroppableArea();\r\n  //   }\r\n  // }, [isDropped, initializeDroppableArea]);\r\n\r\n  // ✅ Memoize tableData (Only re-run if parentDetails change)\r\n  const optimizedTableData = useMemo(\r\n    () => getTableData(parentDetails, cardData),\r\n    [parentDetails, cardData]\r\n  );\r\n\r\n  // ✅ Prevent unnecessary re-renders by checking for data changes\r\n  useEffect(() => {\r\n    if (optimizedTableData.length > 0) {\r\n      console.log(\r\n        \"[RevisionFloat] 📊 optimizedTableData Updated:\",\r\n        optimizedTableData\r\n      );\r\n    }\r\n  }, [optimizedTableData]);\r\n\r\n  // ✅ Memoize cardData (Avoid recalculations unless cardData changes)\r\n  const optimizedCardData = useMemo(() => getCardData(cardData), [cardData]);\r\n\r\n  // ✅ Reset state only when needed\r\n  const handleHomeClick = useCallback(() => {\r\n    // console.log(\r\n    //   \"[handleHomeClick] 🏠 Home icon clicked. Resetting droppable area...\"\r\n    // );\r\n\r\n    if (!isDropped) {\r\n      // console.log(\r\n      //   \"[handleHomeClick] 🚫 Already reset. Skipping unnecessary updates.\"\r\n      // );\r\n      return;\r\n    }\r\n\r\n    // ✅ Only reinitialize if necessary\r\n    if (!initialDraggedData.length) {\r\n      // console.log(\"[handleHomeClick] 🔄 Reinitializing droppable area...\");\r\n      initializeDroppableArea();\r\n    }\r\n\r\n    // ✅ Reset Redux state only if needed\r\n    dispatch(setIsDropped(false));\r\n\r\n    if (cardData || parentDetails.length || initialDraggedData.length) {\r\n      console.log(\"[handleHomeClick] 🗑 Dispatching reset action...\");\r\n      dispatch(\r\n        setDroppedObjectData({\r\n          cardData: {},\r\n          parentDetails: [],\r\n          initialDraggedData: [],\r\n        })\r\n      );\r\n    } else {\r\n      // console.log(\r\n      //   \"[handleHomeClick] 🚫 State already cleared. Skipping dispatch.\"\r\n      // );\r\n    }\r\n\r\n    // console.log(\"[handleHomeClick] ✅ Reset complete.\");\r\n  }, [\r\n    dispatch,\r\n    initializeDroppableArea,\r\n    isDropped,\r\n    initialDraggedData,\r\n    cardData,\r\n    parentDetails,\r\n  ]);\r\n\r\n  // ✅ Memoize filtered columns\r\n  const filteredColumns = useMemo(() => {\r\n    if (cardData?.Type === \"Document\") {\r\n      return tableColumns;\r\n    } else {\r\n      return tableColumns.filter(\r\n        (column) => column.accessorKey !== \"relationship\"\r\n      );\r\n    }\r\n  }, [cardData]);\r\n  // console.log(\"[RevisionFloat] ✅ Component Updated\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"[RevisionFloat] State Changes:\", {\r\n      loading,\r\n      isDropped,\r\n    });\r\n  }, [loading, isDropped]);\r\n\r\n  return (\r\n    <>\r\n      {!isDropped && !loading && <DragAndDropComponent />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex\">\r\n              <div className=\"p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {optimizedCardData && (\r\n                <CardWithDragAndDrop data={optimizedCardData} />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {optimizedTableData.length > 0 ? (\r\n            <div className=\"wrapper-cta\">\r\n              <RevisionFloatToolbarNativeCta />\r\n              <ReusableTable\r\n                key={tableKey.current}\r\n                data={optimizedTableData}\r\n                columns={filteredColumns}\r\n                widgetType=\"Revision_FLoat_Widget\"\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-data-banner\">No Parent object(s) found</div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RevisionFloat;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport RevisionFloat from \"./pages/revisionFloat/revisionFloat\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle-munish\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <RevisionFloat />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["refreshWidgetData","async","dataItems","handleDrop","console","log","length","Error","error","warn","_ref","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","className","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","isDragging","style","opacity","position","top","CSS","Transform","toString","transition","width","getSize","zIndex","cursor","backgroundColor","_jsxs","ref","children","_jsx","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","widgetType","data","editable","meta","type","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","_Fragment","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","DragAndDropComponent","useDroppableArea","performSearch","useInterComSearch","Image","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","CheckmarkCell","FontAwesomeIcon","icon","faCheck","CrossmarkCell","faXmark","tableColumns","WidgetLifecycle","showSuccessToast","showErrorToast","useToast","loading","setLoading","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","stack","userClickedRefresh","sessionStorage","line","isAutoTriggeredRefresh","latestDraggedData","store","droppedObject","droppedObjectData","initialDraggedData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","RevisionFloatToolbarNativeCta","replaceRevisions","useRevisions","useSelector","selectedTableRows","_droppedObjectData$pa","MSG_NO_ROWS","allParents","parentDetails","MSG_NO_REPLACE","selectedParents","find","parent","userEmail","PlatformAPI","loadPlatformAPI","getUser","email","getUserEmail","droppedData","cardData","success","RevisionFloat","initializeDroppableArea","tableKey","isDropped","shallowEqual","hasInitializedDroppable","optimizedTableData","getTableData","Array","isArray","EIN","Title","Description","Type","Revision","connectedChildRev","toBeChildRevConnected","State","Owner","Collabspace","relationship","optimizedCardData","owner","imageURL","getCardData","handleHomeClick","useCallback","setIsDropped","setDroppedObjectData","filteredColumns","CardWithDragAndDrop","ReusableTable","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","rootElement","body","querySelector","document","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}