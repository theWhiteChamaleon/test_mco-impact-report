{"version":3,"file":"static/js/453.0c4e0d54.chunk.js","mappings":"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","sources":["pages/MCOImpactReport/dataHelpers.js","pages/MCOImpactReport/MBOMImpactReportToolbarNativeCta.jsx","pages/MCOImpactReport/DragAndDrop.jsx","pages/MCOImpactReport/MBOMImpactReport.jsx","pages/MCOImpactReport/MBOMImpactReportIndex.js"],"sourcesContent":["// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst MBOMImpactReportToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MBOMImpactReportToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./MBOMImpactReport.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          // className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        {/* <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div> */}\r\n        {/* <SearchInput onSearch={handleSearch} /> */}\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              {/* <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button> */}\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              {/* <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group> */}\r\n            </div>\r\n            {/* <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div> */}\r\n            {/* <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./MBOMImpactReport.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport MBOMImpactReportToolbarNativeCta from \"./MBOMImpactReportToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst MBOMImpactReport = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[MBOMImpactReport] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[MBOMImpactReport] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"MBOMImpactReport\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <MBOMImpactReportToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                {/* <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                /> */}\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MBOMImpactReport;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport MBOMImpactReport from \"./MBOMImpactReport\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      {/* <WidgetLifecycle /> */}\r\n      <MBOMImpactReport />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["PlantRenderer","_ref","plants","itemId","isRemoveMode","handleRemovePlant","console","log","length","_jsx","_Fragment","children","map","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","onClick","PlantID","getTableData","tableData","type","CAData","data","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","state","isMFGCA","showWarningToast","showSuccessToast","useToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","useState","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","handleDrop","usePlantDropableArea","performSearch","useInterComSearch","Image","width","height","src","alt","class","MBOMImpactReport","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","loading","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","showErrorToast","securityContext1","window","widget","getValue","useCallback","plantId","item","_objectSpread","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","useSelector","droppedObject","droppedObjectData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","filter","includes","updateTableData","updatedData","useEffect","prevKey","cardData","initialDraggedData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","items","objectType","dupInitialAssignedClasses","setDupInitialAssignedClasses","async","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find2","finalObj","classid","find","classitem","id","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find3","classObject","rowstoDelete","some","_allPlants$find4","classItem","result","saveData","objectId","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","split","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","cell","_ref2","original","value","Loader","flexDirection","justifyContent","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","error","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","MBOMImpactReportToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","warn","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","store","getState","refreshWidgetData","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ContentErrorsModal","errors","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","document","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}