{"version":3,"file":"static/js/694.7f4f1416.chunk.js","mappings":"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","sources":["services/api/PlantAssignment/saveTableDataService.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/PlantAssignment/createMFGCA.js","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n"],"names":["extractIdsFromTitles","data","allPlants","console","log","newClasses","map","item","itemTitle","title","replace","matchedPlant","find","plant","toLowerCase","id","filter","handleRemoveData","async","removedTitles","productId","type","rowstoDelete","length","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","objectId","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","state","change","identifier","action","ErrorObject","forEach","classId","missingIn","child","includes","name","join","push","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","concat","filteredNewClasses","some","classifyUrl","mode","classifyResponse","error","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","headers","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","body","method","Promise","resolve","reject","authenticatedRequest","_objectSpread","onComplete","response","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl","_ref","errors","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","slice","rowNumber","columnName","columns","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","index","style","parent","_jsx","CellMeasurer","columnIndex","rowIndex","children","_jsxs","className","width","column","i","err","ReusableAlert","variant","_Fragment","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","show","onHide","CustomModal","footerButtons","label","onClick","ErrorPopup","forwardRef","ref","addedItem","CAName","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","cell","row","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","callManufacturingCAApi","arguments","undefined","axios","handleFileChange","event","setValidationErrors","setShowErrorsModal","showErrorToast","showSuccessToast","setValidatedData","setSelectedFiles","setIsCreateButtonDisabled","files","target","validExtensions","invalidFiles","from","file","endsWith","value","reader","FileReader","onload","Uint8Array","e","result","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","normalizedHeaders","toString","trim","plants","errorDescription","formattedErrors","onerror","readAsArrayBuffer","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","handleReset","csrfTokenHeaders","fetchCsrfToken","CAHeaders","credentials","window","widget","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","items","uniquePlantTitles","Set","itemName","plantsList","p","add","parentPlants","plantTitle","PlantName","PlantID","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","display","alignItems","stopPropagation","navigator","clipboard","writeText","background","border","cursor","marginLeft","color","FaRegCopy","size","Alert","Modal","centered","Header","closeButton","Title","Body","Footer","btn","Button"],"sourceRoot":""}