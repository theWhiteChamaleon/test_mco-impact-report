{"version":3,"file":"static/js/746.f4e9ba9e.chunk.js","mappings":"qNAQA,MAiEA,EAjE6BA,KAC3B,MAAM,WAAGC,IAAeC,EAAAA,EAAAA,MAClB,cAAEC,IAAkBC,EAAAA,EAAAA,KAwC1B,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,2BAA0BF,SAAA,EAEpCF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJN,UAAU,iBAEZJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,qBAAoBF,SAAC,mBACrCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAII,UAAU,aACdJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,QAC/BF,EAAAA,EAAAA,KAAA,MAAII,UAAU,gBAEhBJ,EAAAA,EAAAA,KAACW,EAAAA,EAAW,CAACC,SAvDGC,IAmCpBf,EAAce,EAlCK,CACjBC,MAAO,SACPC,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAIzBA,GACAA,EAAgBC,OAAS,GACzBD,EAAgB,GAAGE,GAEnB/B,EAAW,CACT,CACEgC,SAAUH,EAAgB,GAAGE,GAC7BE,WAAYJ,EAAgB,GAAG,sBAInCK,QAAQC,KAAK,oD,6ECvCrB,MAAMC,EAAuBA,CAACC,EAAMC,KAClCJ,QAAQK,IAAI,mCAAoCF,GAChDH,QAAQK,IAAI,qCAAsCD,GAElD,MAAME,EAAaH,EAChBI,KAAKC,IACJ,MAAMC,EAAYD,EAAKxB,MAAM0B,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAE7DC,EAAeP,EAAUQ,MAAMC,GAChBA,EAAM7B,MACtB0B,QAAQ,OAAQ,IAChBA,QAAQ,SAAU,IACHI,gBAAkBL,EAAUK,gBAGhD,OAAOH,EAAeA,EAAad,GAAK,QAEzCkB,QAAQlB,GAAc,OAAPA,IAIlB,OADAG,QAAQK,IAAI,8BAA+BC,GACpCA,GAGIU,EAAmBC,MAC9Bb,EACAc,EACAC,EACAC,KAEApB,QAAQK,IAAI,YAAaD,GACzBJ,QAAQK,IAAI,gBAAiBa,GAC7B,MAAMG,EAAenB,EAAqBgB,EAAed,GAGzD,GAAIiB,EAAazB,OAAS,EAAG,CAC3B,IAAI0B,EACF,iGAEEC,EAAe,CACjB1B,GAAIsB,EACJC,KAAMA,EACNI,QAASH,GAEX,MAAMI,QAA2BC,EAAAA,EAAAA,IAC9B,OACDJ,EACAC,GAGFvB,QAAQK,IAAI,sBAAuBsB,KAAKC,UAAUH,GACpD,GAIWI,EAAgBZ,MAC3Bd,EACAC,EACAN,EACAsB,EACAU,EACAC,EACAC,KAEAhC,QAAQK,IAAI,mCAAoCF,GAGhD,MAAMG,EAAaJ,EAAqBC,EAAMC,GAC9CJ,QAAQK,IAAI,+BAAgCC,GAC5CN,QAAQK,IAAI,gBAAiB0B,GAG7B,MAAME,EAAsBF,EAAchB,QAAQmB,IAChD,GAAsC,aAAlCA,EAAUC,MAAMrB,cAA8B,CAMhD,OALegB,EAAgBlB,MAC5BwB,GACCA,EAAOC,aAAeH,EAAUrC,IACA,WAAhCuC,EAAOE,OAAOxB,eAGpB,CACA,OAAO,KAGTd,QAAQK,IAAI,2BAA4B4B,GAGxC,MAAMM,EAAc,GAEpBjC,EAAWkC,SAASC,IAClB,MAAMC,EAAYT,EAAoBlB,QACnC4B,IAAWA,EAAMnB,QAAQoB,SAASH,KAElClC,KAAKoC,GAAUA,EAAME,OACrBC,KAAK,MAEU,KAAdJ,GAAkC,cAAdA,GACtBH,EAAYQ,KAAK,CAAEC,QAASP,EAASQ,OAAQP,OAGjD1C,QAAQK,IAAI,yBAA0BkC,GAGtC,IAAIW,EAAe,GACnBX,EAAYC,SAAShC,IAAU,IAAD2C,EAC5B,MAAMC,EAEL,QAFeD,EAAG/C,EAAUQ,MAC1BC,GAAUA,EAAMhB,KAAOW,EAAKwC,iBAC9B,IAAAG,OAAA,EAFkBA,EAEhBnE,MACGqE,EAAO,iCAAAC,OAAoCF,EAAU,sCAAAE,OAAqC9C,EAAKyC,QACrGC,GAAY,GAAAI,OAAOD,EAAO,SAG5BrD,QAAQK,IAAI,mBAAoB6C,GAGhC,MAAMK,EAAqBjD,EAAWS,QACnClB,IAAQ0C,EAAYiB,MAAMhD,GAASA,EAAKwC,UAAYnD,MAQvD,GANAG,QAAQK,IACN,iDACAkD,GAIEA,EAAmB3D,OAAS,EAAG,CACjC,MAAM6D,EACJ,+FAEIlC,EAAe,CACnB1B,GAAIC,EACJsB,KAAMA,EACNI,QAAS+B,EACTrE,KAAM,kBAGRc,QAAQK,IAAI,qBAAsBkB,GAElC,IACE,MAAMmC,QAAyBhC,EAAAA,EAAAA,IAC7B,OACA+B,EACAlC,GAGFvB,QAAQK,IAAI,qBAAsBsB,KAAKC,UAAU8B,GACnD,CAAE,MAAOC,GACP3D,QAAQ2D,MAAM,8BAA+BA,EAC/C,CACF,CAEA,GACEJ,EAAmB3D,OAAS,GAC5BmC,EAAcnC,OAAS,GACd,iBAATwB,GACAY,EACA,CACA,IAAIyB,EACF,+FAEElC,EAAe,CACjB1B,GAAIC,EACJsB,KAAMA,EACNI,QAAS+B,EACTK,OAAQ7B,EACR7C,KAAM,kBAER,MAAM2E,QAA8BnC,EAAAA,EAAAA,IACjC,OACD+B,EACAlC,GAGFvB,QAAQK,IACN,0BACAsB,KAAKC,UAAUiC,GAEnB,CAEA,MAAO,CACLC,SAAS,EACTT,QAAS,0BACTd,YAAaA,EACbW,aAAcA,IAILa,EAAW9C,MACtB+C,EACAC,EACAC,EACAC,EACAhD,EACAiD,EACArC,EACAX,EACAC,EACAgD,EACAvC,KAEA,IACE,MAAMwC,EAAkBC,4DACxBvE,QAAQK,IAAI,+CACZL,QAAQK,IAAI,2BAA4Be,GACxCpB,QAAQK,IAAI,8BAA+BgE,GAC3CrE,QAAQK,IAAI,2BAA4ByB,GACxC,MACM0C,QAAgBC,EAAAA,EAAAA,MAChBC,EAAgBzD,MAAO0D,EAAKC,EAAMC,KACtC7E,QAAQK,IAAI,gBAAiBsE,GAC7B3E,QAAQK,IAAI,gBAAiBsB,KAAKC,UAAUgD,EAAM,KAAM,IAEjD,IAAIE,SAAQ,CAACC,EAASC,KAC3BR,EAAQS,qBAAqBN,EAAK,CAChCE,SACAV,SAAOe,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFf,GAAO,IACV,eAAgB,qBAElBhE,KAAMwB,KAAKC,UAAUgD,GACrBxD,KAAM,OACN+D,WAAaC,IACXpF,QAAQK,IAAI,qBAAsB+E,GAClCL,EAAQK,IAEVC,UAAY1B,IACV3D,QAAQ2D,MAAM,kBAAmBA,GACjCqB,EAAOrB,UASf,IAAI1B,EAAsBF,EAAchB,QAAQmB,IAE9C,GADAlC,QAAQK,IAAI,wBAAyB6B,GACC,aAAlCA,EAAUC,MAAMrB,cAA8B,CAChDd,QAAQK,IAAI,sBAAuB6B,GACnC,MAAME,EAASN,EAAgBlB,MAC5BwB,GACCA,EAAOC,aAAeH,EAAUrC,IACA,WAAhCuC,EAAOE,OAAOxB,gBAGlB,OADAd,QAAQK,IAAI,iCAAkC+B,IACtCA,CACV,CAEA,OADApC,QAAQK,IAAI,qCAAsC6B,EAAUC,QACrD,KAETnC,QAAQK,IAAI,4BAA6B4B,GAEzC,IAAIqD,EAAW,GACfjB,EAAW7B,SAAS+C,IAElB,GAAIA,EAAUC,UAAW,CACvB,IAAIC,EAAa,GACjBxD,EAAoBO,SAASkD,IACtBA,EAAmBlE,QAAQoB,SAAS2C,EAAU1F,KACjD4F,EAAW1C,KAAK,CACd4C,QAASD,EAAmB7F,GAC5B+F,UAAWF,EAAmB7C,UAIhC4C,EAAW7F,OAAS,GACtB0F,EAASvC,KAAK,CACZlD,GAAI0F,EAAU1F,GACdb,MAAOuG,EAAUvG,MACjB4E,OAAQ6B,EACRrE,KAAMmE,EAAUM,MAGtB,KAEF,IAAI3C,EAAe,GACnBlD,QAAQK,IAAI,cAAeiF,GAC3BA,EAAS9C,SAAShC,IAChB,IAAI6C,EAAU,GAGd,GACEyC,MAAMC,QAAQvF,EAAKoD,SACnBpD,EAAKoD,OAAOoC,OAAOrD,GAAUA,EAAMiD,YACnC,CACA,MAAMK,EAAczF,EAAKoD,OACtBrD,KAAKoC,GAAUA,EAAMiD,YACrB9C,KAAK,MACR9C,QAAQK,IAAI,oBAAqB4F,GAE/B5C,EAD8B,QAA5B7C,EAAKY,KAAKN,cACL,GAAAwC,OAAM9C,EAAKxB,MAAK,yDAAAsE,OAAwD2C,GAExE,8BAAA3C,OAAiC9C,EAAKxB,MAAK,sCAAAsE,OAAqC2C,GAEzFjG,QAAQK,IAAI,cAAegD,EAC7B,MAEEA,EAAO,0BAAAC,OAA6B9C,EAAKxB,MAAK,KAIhDkE,GAAY,GAAAI,OAAOD,EAAO,SAE5BrD,QAAQK,IAAIiF,GACZtF,QAAQK,IAAI,2BAA4B6C,GAExC,IAAI5C,EAAa+D,EACdtD,QACEwE,GACkC,QAAjCA,EAAUM,KAAK/E,gBACdwE,EAAS9B,MAAM0C,GAAcA,EAAUrG,KAAO0F,EAAU1F,OAE5DU,KAAKgF,GAAcA,EAAU1F,KAChCG,QAAQK,IAAI,mBAAoBC,GAChC,IAAI6F,EAAa,CAAC,EAClB9B,EAAW7B,SAAS+C,KACSD,EAAS9B,MACjC0C,GAAcA,EAAUrG,KAAO0F,EAAU1F,OAIR,WAAjC0F,EAAUM,KAAK/E,eACoB,QAAjCyE,EAAUM,KAAK/E,eAA2ByE,EAAUC,aAEvDW,EAAWZ,EAAUa,UAAYb,EAAUC,cAG/CxF,QAAQK,IAAI,kBAAmB8F,GAE/B,IAAIE,EAAmBhC,EACpBtD,QACEwE,GACCA,EAAUC,YACTF,EAAS9B,MAAM0C,GAAcA,EAAUrG,KAAO0F,EAAU1F,OAE5DU,KAAKgF,GAAcA,EAAU1F,KAIhC,GAFAG,QAAQK,IAAI,4BAA6BgG,GAErC/F,EAAWV,OAAS,EAAG,CACzB,IAAI6D,EACF,+FACElC,EAAe,CACjB1B,GAAIsB,EACJC,KAAMA,EACNI,QAASlB,EACTpB,KAAM,kBAER,MAAMwE,QAAyBhC,EAAAA,EAAAA,IAC7B,OACA+B,EACAlC,GAGFvB,QAAQK,IAAI,oBAAqBsB,KAAKC,UAAU8B,GAClD,CAEA,GAAI4C,OAAOC,KAAKJ,GAAYvG,OAAS,EAAG,CAAC,IAAD4G,EACtC,MAAMC,EAAU,GAAAnD,OAAMgB,EAAe,qDAAAhB,OAAoDnC,GACnFiE,QAAiBV,EAAc+B,EAAY,GAAI,OACrDzG,QAAQK,IAAI,mBAAoB+E,GAChC,IAAIsB,GAA4B,QAAlBF,EAAApB,EAASuB,OAAO,UAAE,IAAAH,OAAA,EAAlBA,EAAoBE,UAAW,GAC7CP,EAAoB,QAAIO,EAExB,MAAME,EAAQ,0GAAAtD,OAA6GnC,SACrHO,EAAAA,EAAAA,IAAU,QAAQkF,EAAUT,GAClCnG,QAAQK,IAAI,iCACd,CAEA,GACEgG,EAAiBzG,OAAS,GAC1BmC,EAAcnC,OAAS,GACd,iBAATwB,EACA,CACA,IAAIqC,EACF,+FAEElC,EAAe,CACjB1B,GAAIsB,EACJC,KAAMA,EACNI,QAAS6E,EACTzC,OAAQ7B,EACR7C,KAAM,kBAER,MAAM2E,QAA8BnC,EAAAA,EAAAA,IACjC,OACD+B,EACAlC,GAGFvB,QAAQK,IACN,0BACAsB,KAAKC,UAAUiC,GAEnB,CACA,GAAIxC,EAAazB,OAAS,EAAG,CAC3B,IAAI0B,EACF,iGAEEC,EAAe,CACjB1B,GAAIsB,EACJC,KAAMA,EACNI,QAASH,GAEX,MAAMI,QAA2BC,EAAAA,EAAAA,IAC/B,OACAJ,EACAC,GAGFvB,QAAQK,IAAI,sBAAuBsB,KAAKC,UAAUH,GACpD,CAIA,OAFAzB,QAAQK,IAAI,wDAEL,CACLyD,SAAS,EACTT,QAAS,0BACTiC,SAAUA,EACVpC,aAAcA,EAElB,CAAE,MAAOS,GAEP,OADA3D,QAAQ2D,MAAM,kBAAmBA,GAC1B,CAAEG,SAAS,EAAOT,QAAS,sBAAuBM,QAC3D,E,iGCxZF,MA4GA,GA5GuBkD,EAAAA,EAAAA,aACrB,CAAAC,EAA8CC,KAAS,IAAtD,KAAE5G,EAAI,QAAE6G,EAAO,UAAEC,EAAS,OAAEC,EAAM,MAAE/E,GAAO2E,EAC1C,MAAM,iBAAEK,IAAqBC,EAAAA,EAAAA,MACtBC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAAC,IAElDC,EAAAA,EAAAA,YAAU,KACRF,EAAgB,CAAC,KAChB,CAACnH,IAEJ,MAAMsH,EAAWA,KACf,MACMC,EADeC,EAAMC,sBAAsBC,KACdtH,KAChCC,GAASA,EAAKsH,SAAS,qBAGG,IAAzBJ,EAAc9H,QAKlBqH,EAAUS,GACVJ,EAAgB,CAAC,IALfH,EAAiBY,EAAAA,MASrBC,EAAAA,EAAAA,qBAAoBjB,GAAK,MACvBU,eAGF,MAAMQ,GAAkBC,EAAAA,EAAAA,UAAQ,IAYvB,CAXiB,CACtBrI,GAAI,SACJsI,KAAMC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OACZlK,EAAAA,EAAAA,KAAA,SACEkD,KAAK,WACL9C,UAAU,mBACVgK,QAASD,EAAIE,gBACbC,SAAUH,EAAII,kCAIQzB,IAC3B,CAACA,IAEEW,GAAQe,EAAAA,EAAAA,IAAc,CAC1BvI,OACA6G,QAASiB,EACT9F,MAAO,CAAEkF,gBACTsB,oBAAoB,EACpBC,qBAAsBtB,EACtBuB,iBAAiBA,EAAAA,EAAAA,QAGnB,OACExK,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACEkD,KAAK,SACL9C,UAAU,+BACVwK,QAASA,KACPnB,EACGoB,cACAlB,KAAKrF,SAAS6F,GAAQA,EAAIW,gBAAe,MAC5C5K,SACH,gBAGDF,EAAAA,EAAAA,KAAA,UACEkD,KAAK,SACL9C,UAAU,4BACVwK,QAASA,KACPnB,EACGoB,cACAlB,KAAKrF,SAAS6F,GAAQA,EAAIW,gBAAe,MAC5C5K,SACH,oBAKFuJ,EAAMoB,cAAclB,KAAKjI,OAAS,GACjC1B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAgBE,MAAO,CAAEyK,UAAW,QAAS7K,SACzDuJ,EAAMoB,cAAclB,KAAKtH,KAAK8H,IAC7BhK,EAAAA,EAAAA,MAAA,OAEEC,UAAU,8CACVE,MAAO,CACL0K,gBAAiBb,EAAIE,gBAAkB,UAAY,WACnDnK,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UAClB+K,EAAAA,EAAAA,IACCd,EAAIe,kBAAkB,GAAGC,OAAOC,UAAUnB,KAC1CE,EAAIe,kBAAkB,GAAGG,iBAG7BrL,EAAAA,EAAAA,KAAA,OAAAE,SAAMiK,EAAIP,SAASd,EAAQ,GAAGwC,iBAZzBnB,EAAIxI,SAiBf3B,EAAAA,EAAAA,KAAA,KAAGI,UAAU,iBAAgBF,SAAC,2B,kRCvHxC,MAiFA,EAjF2B0I,IAMpB,IANqB,gBAC1B2C,EAAe,aACfC,EAAY,cACZC,EAAa,aACbC,EAAY,QACZC,GACD/C,EACC,MAAOgD,EAAgBC,IAAqBxC,EAAAA,EAAAA,UAAS,KAC9CyC,EAAeC,IAAoB1C,EAAAA,EAAAA,UAAS,IAE7C2C,EAAqBC,IACpBL,GAAmBE,GAKxBL,EACEG,EACAE,EACAG,EAAa,MAAQ,YAEvBN,KATEO,MAAM,wCAYV,OACE/L,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVE,MAAO,CAAEC,MAAO,QAAS4L,QAAS,SAAUjM,SAAA,EAE5CF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPC,EAAAA,EAAAA,MAAA,UACEC,UAAU,mBACVkK,SAAW8B,GAAMP,EAAkBO,EAAEC,OAAOC,OAC5CA,MAAOV,EAAe1L,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQsM,MAAM,GAAEpM,SAAC,wBAChBqL,EAAgBlJ,KAAKkK,IACpBvM,EAAAA,EAAAA,KAAA,UAAkBsM,MAAOC,EAAIrM,SAC1BqM,GADUA,SAMjBvM,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEC,UAAU,mBACVkM,MAAOR,EACPxB,SAAW8B,GAAML,EAAiBK,EAAEC,OAAOC,OAC3CE,UAAWZ,EAAe1L,SAAA,EAE1BF,EAAAA,EAAAA,KAAA,UAAQsM,MAAM,GAAEpM,SAAC,uBAChBwL,EAAarJ,KAAKoK,IACjBzM,EAAAA,EAAAA,KAAA,UAAkBsM,MAAOG,EAAIvM,SAC1BuM,GADUA,SAMjBzM,EAAAA,EAAAA,KAAA,UACEI,UAAU,oCACVwK,QAASA,IAAMoB,GAAkB,GACjCQ,UAAWhB,EAAa9J,OACxBpB,MAAO,CAAEoM,OAASlB,EAAa9J,OAAyB,UAAhB,eAA4BxB,SACrE,uBAGDF,EAAAA,EAAAA,KAAA,UACEI,UAAU,oCACVwK,QAASA,IAAMoB,GAAkB,GAAM9L,SACxC,kBAKDF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,mCAAmCwK,QAASe,EAAQzL,SAAC,cCI7E,EA1EkC0I,IAS3B,IAT4B,OACjC+D,EAAM,MACN1I,EAAK,aACLuH,EAAY,UACZoB,EAAS,aACTC,EAAY,KACZ3J,EAAI,eACJ4J,EAAc,gBACdC,GACDnE,EACC,MAAM,iBAAEK,IAAqBC,EAAAA,EAAAA,MACtB8D,EAAcC,IAAmB5D,EAAAA,EAAAA,WAAS,GA0BjD,OACElJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kCAAiCF,SAAA,EAC9CC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQF,SAAA,EACrBF,EAAAA,EAAAA,KAAA,UACEI,UAAU,qCACVwK,QA7BgBsC,KACT,aAAThK,GAAuB4J,IAAmBC,EAC5C9D,EAAiBkE,EAAAA,IAEjBR,KAyB6BzM,SAC1B,UAGDF,EAAAA,EAAAA,KAAA,UACEI,UAAU,qCACVwK,QAASA,IACE,aAAT1H,GAAuB4J,IAAmBC,EACtC9D,EAAiBkE,EAAAA,IACjBF,GAAiBG,IAAUA,IAChClN,SACF,mBAMF8M,IACChN,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UACnBF,EAAAA,EAAAA,KAACqN,EAAkB,CACjB9B,gBAjCc,CACtB,mCACA,+BACA,+BACA,iCACA,WA6BQC,aAAcA,EACdC,cA1Ce6B,CAACnC,EAAQmB,EAAOiB,KAErCV,EADY,aAAVU,EACW/B,EAEAoB,EAFczB,EAAQmB,IAyC7BZ,aAAc,CAAC,MAAO,MACtBC,QAASA,IAAMsB,GAAgB,W,cCnD3C,MA4UA,EA5UkBO,KAChB,MAAM,wBAAEC,EAAuB,QAAEC,IAAYC,EAAAA,EAAAA,MACtCC,EAAUC,IAAexE,EAAAA,EAAAA,UAAS,IAClCuD,EAAWkB,IAAgBzE,EAAAA,EAAAA,UAAS,KACpC0E,EAAgBC,IAAqB3E,EAAAA,EAAAA,WAAS,IAC9C4E,EAAcC,IAAmB7E,EAAAA,EAAAA,WAAS,IAC1C8E,EAAqBC,IAA0B/E,EAAAA,EAAAA,WAAS,IACxDgF,EAAUC,IAAejF,EAAAA,EAAAA,UAAS,KAClCkF,EAAgBC,IAAqBnF,EAAAA,EAAAA,UAAS,IAC/CoF,GAAWC,EAAAA,EAAAA,OACX,iBAAEC,EAAgB,eAAEC,IAAmB1F,EAAAA,EAAAA,MAE7CI,EAAAA,EAAAA,YAAU,KACJ+E,EAAS3M,QACXoM,EAAaO,EAAShM,KAAKC,IAAI0E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAW1E,GAAI,IAAEuM,aAAc,CAAC,SAEhE,CAACR,IA+GJvM,QAAQK,IAAI,2BAA4ByK,GACxC,MAAMkC,GAAoBC,EAAAA,EAAAA,KACvB9K,GAAUA,EAAM+K,cAAcF,oBAG3BG,GAAoBF,EAAAA,EAAAA,KACvB9K,GAAUA,EAAM+K,cAAcC,oBAEjCnN,QAAQK,IAAI,oBAAqB8M,GAEjC,MAAMC,GAAuBH,EAAAA,EAAAA,KAC1B9K,GAAUA,EAAM+K,cAAcE,uBAEjCpN,QAAQK,IAAI,yBAA0B+M,GACtC,MAAMtL,GAAkBmL,EAAAA,EAAAA,KACrB9K,GAAUA,EAAM+K,cAAcG,gBAAgBvL,kBAEjD9B,QAAQK,IAAI,wBAAyByB,GAErC,MAAMwL,GAAYL,EAAAA,EAAAA,KAAa9K,GAAUA,EAAM+K,cAAcI,YACvDC,GAAUN,EAAAA,EAAAA,KAAa9K,GAAUA,EAAM+K,cAAcM,gBAE3DxN,QAAQK,IAAI,6BAA8BkN,GAC1C,MAAME,GAAkBR,EAAAA,EAAAA,KACrB9K,GAAUA,EAAM+K,cAAcM,cAAcE,eAE/C1N,QAAQK,IAAI,gBAAiBoN,GAE7B,MAAME,EAAmBC,IACvB,MAAMC,EAAqBD,EAAYrN,KAAKuN,IAC1C,MAAMC,EAAexB,EAAS3L,MAC3BoN,GACCA,EAAQC,QAAUH,EAAQG,OAC1BD,EAAQE,WAAaJ,EAAQI,WAGjC,IAAKH,EAAc,OAAA7I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY4I,GAAO,IAAEf,aAAc,CAAC,IAGvD,MAAMA,EAAe,CAAC,EAOtB,OANAzG,OAAOC,KAAKuH,GAAStL,SAAS2L,IACxBL,EAAQK,KAASJ,EAAaI,KAChCpB,EAAaoB,IAAO,OAIxBjJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY4I,GAAO,IAAEf,oBAGvBf,EAAa6B,IASf,GANA7N,QAAQK,IAAI,iBAAkByK,IAC9BtD,EAAAA,EAAAA,YAAU,KACJsD,EAAUlL,QAAU,GACtBmM,GAAaqC,GAAYA,EAAU,MAEpC,CAACtD,IACAqC,EAAkBkB,UAAYlB,EAAkBmB,mBAAqB,IAADC,EAAAC,EAClErM,EAAQgL,EAAkBkB,SAAS,kBACnCjN,EAA2C,QAAvCmN,EAAGpB,EAAkBmB,0BAAkB,IAAAC,GAAM,QAANC,EAApCD,EAAsCpO,YAAI,IAAAqO,OAAN,EAApCA,EAA4CC,MAAM,GAAG1O,YAGlEyH,EAAAA,EAAAA,YAAU,KACH8F,GACH3B,MAED,CAAC2B,EAAW3B,KACfnE,EAAAA,EAAAA,YAAU,KACR0E,EAAkBkB,KACjB,CAACA,IAEJ,MAAMsB,GAAexG,EAAAA,EAAAA,UACnB,IC9LwByG,EAACpB,EAASnM,IAC/BmM,EAEEA,EAAQhN,KAAKJ,IAClB,IAAIyO,EAAU,CACZX,OAAW,OAAJ9N,QAAI,IAAJA,OAAI,EAAJA,EAAM0O,aAAc,MAC3BX,UAAc,OAAJ/N,QAAI,IAAJA,OAAI,EAAJA,EAAM2O,gBAAiB,IACjCC,OAAW,OAAJ5O,QAAI,IAAJA,OAAI,EAAJA,EAAM6O,aAAc,MAC3B,mCACE7O,EAAK8O,8BAAgC,KACvC,+BAAgC9O,EAAK+O,0BAA4B,KACjE,+BAAgC/O,EAAKgP,2BAA6B,KAClE,iCAAkChP,EAAKiP,4BAA8B,KACrE,UAAWjP,EAAK,YAAc,MAQhC,MAJa,aAATiB,IACFwN,EAAQS,UAAe,OAAJlP,QAAI,IAAJA,OAAI,EAAJA,EAAMmP,cAAe,SAGnCV,KApBY,GD6LbD,CAAalB,EAAiBrM,IACpC,CAACqM,EAAiBrM,KAEpBoG,EAAAA,EAAAA,YAAU,KACRgF,EAAYkC,KACX,CAACA,KAEJlH,EAAAA,EAAAA,YAAU,KACJkH,EAAa9O,QAAU,IACzBI,QAAQK,IAAI,kBAAmBqO,GAC/B1C,EAAa0C,GACb3C,GAAaqC,GAAYA,EAAU,OAEpC,CAACM,IACJ,MAAML,GAAWnG,EAAAA,EAAAA,UACf,IC1OwBiF,KAC1B,IAAKA,IAAsBA,EAAkBkB,SAC3C,OAAO,KAGT,MAAM7N,EAAO2M,EAAkBkB,SAE/B,IAAIA,EAAW,CACbrP,MAAOwB,EAAKyN,OAAS,MACrB7M,KAAMZ,EAAKqF,MAAQ,MACnB,iBAAkBrF,EAAK,mBAAqB,MAC5C+O,MAAO/O,EAAKgP,OAAS,MACrB,4BAA6BhP,EAAK,8BAAgC,MAClEiP,YAAajP,EAAKiP,aAAe,MACjC,mBAAoBjP,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCkP,SACElP,EAAKkP,UACL,uHAOJ,MAJkB,aAAdlP,EAAKqF,OACPwI,EAASsB,IAAMnP,EAAKmP,KAAO,MAC3BtB,EAAS,cAAgB7N,EAAK,eAAiB,OAE1C6N,GDgNCuB,CAAYzC,IAClB,CAACA,IAEHnN,QAAQK,IAAIgO,IACZ7G,EAAAA,EAAAA,YAAU,KACR8E,IAAyB+B,KACxB,CAACA,IACJ,MAAMrH,GAAUkB,EAAAA,EAAAA,UACd,IC5LwB2H,EAACzO,EAAM4J,EAAgBC,KACjD,MAAM6E,EAAc,CAClB,CAAEtG,YAAa,QAASuG,OAAQ,SAChC,CAAEvG,YAAa,WAAYuG,OAAQ,YACnC,CAAEvG,YAAa,QAASuG,OAAQ,UAGrB,aAAT3O,GACF0O,EAAY/M,KAAK,CAAEyG,YAAa,WAAYuG,OAAQ,cAGtD,MAAMtG,EAAkB,CACtB,mCACA,+BACA,+BACA,iCACA,WACAlJ,KAAKyP,IAAS,CACdxG,YAAawG,EACbD,OAAQC,EACR7H,KAAMrB,IAA+B,IAA9B,IAAEuB,EAAG,SAAE4H,EAAQ,MAAEtI,GAAOb,EAoB7B,OAjBW,aAAT1F,EAC8B,UAA1BiH,EAAIP,SAASuH,SACZrE,GAAkBA,IAAmBC,IAmC1C/M,EAAAA,EAAAA,KAAA,QAAAE,SAAO6R,OAnBP5R,EAAAA,EAAAA,MAAA,UACEmM,MAAOyF,IACPzH,SAhB0B8B,IAAO,IAAD4F,EAClC,MAAMC,EAAe7F,EAAEC,OAAOC,MACxBoD,EAAcjG,EACjBoB,cACAlB,KAAKtH,KAAK6P,GACTA,EAAEvQ,KAAOwI,EAAIxI,IAAEqF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNkL,EAAEtI,UAAQ,IAAE,CAACkI,GAAYG,IAC9BC,EAAEtI,WAGQ,QAAlBoI,EAAAvI,EAAM0I,QAAQC,YAAI,IAAAJ,GAAlBA,EAAoBvC,gBAAgBC,IAOlCtP,UAAU,+EACVE,MAAO,CACLC,MAAO,MACP8R,QAAS,QACTC,SAAU,OACVC,WAAY,OACZC,OAAQ,OACRC,UAAW,QAEbC,YAActG,GAAOA,EAAEC,OAAO/L,MAAMkS,OAAS,iBAC7CG,WAAavG,GAAOA,EAAEC,OAAO/L,MAAMkS,OAAS,OAAQtS,SAAA,EAEpDF,EAAAA,EAAAA,KAAA,UAAQsM,MAAM,MAAKpM,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQsM,MAAM,KAAIpM,SAAC,eAQ3B,MAAO,IAAI0R,KAAgBrG,ID4HvBoG,CACEzO,EACiB,OAAjB+L,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,mBACX,OAAjBlB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,sBAEhC,CAACjN,EAAuB,OAAjB+L,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,WA4B5B,OACEhQ,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CACG+N,IACC9N,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC9BF,EAAAA,EAAAA,KAAC4S,EAAAA,EAAM,KACP5S,EAAAA,EAAAA,KAAA,KAAAE,SAAG,kBAGLkP,IAAc1B,IAAYK,IAAkB/N,EAAAA,EAAAA,KAACL,EAAAA,EAAoB,IAClE+N,IAAW1N,EAAAA,EAAAA,KAAC4S,EAAAA,EAAM,IAClBxD,IAECjP,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAEEwN,IAAW1N,EAAAA,EAAAA,KAAC4S,EAAAA,EAAM,KAClB5S,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qCAAoCF,UACjDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASF,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJI,IAAI,+DACJC,IAAI,YACJN,UAAU,YACVwK,QA/CQiI,KACtBpF,IACAgB,GAASqE,EAAAA,EAAAA,KAAa,IACtBrE,GACEsE,EAAAA,EAAAA,IAAqB,CACnB5C,SAAU,CAAC,EACX6C,cAAe,GACfC,SAAU,GACV7C,mBAAoB,MAGxB3B,GACEyE,EAAAA,EAAAA,IAAmB,CACjBhR,UAAW,GACXiR,sBAAuB,GACvBC,aAAc,GACdC,gBAAiB,GACjBrK,QAAQ,EACR/C,QAAS,CAAC,KAGd6H,EAAa,IACbM,GAAuB,QA4BZ+B,IACCnQ,EAAAA,EAAAA,KAACsT,EAAAA,EAAmB,CAACrR,KAAMkO,EAAUoD,WAAW,mBAKrDxF,GACC/N,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBF,UACrCF,EAAAA,EAAAA,KAAC4S,EAAAA,EAAM,OAGT5S,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BF,EAAAA,EAAAA,KAACwT,EAAyB,CACxB7G,OAtRG5J,UACjBjB,QAAQK,IAAI,iBAAkByK,GAC9BsB,GAAgB,GAChBpM,QAAQK,IAAI,kBAAmBe,GAC/B,IACIuQ,EACAC,EACAC,EACAC,EAJAC,EAAa,GAKJ,aAAT3Q,GACF2Q,EAAa,CACXC,SAAU7E,EAAkBkB,SAAS4D,KACrCC,aAAc/E,EAAkBkB,SAAS,oBACzC8D,UAAWhF,EAAkBkB,SAAS,kBACtC+D,OAAQjF,EAAkBkB,SAAa,IAGzCsD,EAAe,WACfC,EAAc,eACdC,EAAgB,YAChBC,EAAa,WAEb9R,QAAQK,IAAI,2BACZ0R,EAAa,CACXM,SAAUlF,EAAkBkB,SAAS4D,KACrCK,aAAcnF,EAAkBkB,SAAS,oBACzCkE,UAAWpF,EAAkBkB,SAAS,kBACtCmE,OAAQrF,EAAkBkB,SAAa,IAGzCsD,EAAe,WACfC,EAAc,eACdC,EAAgB,YAChBC,EAAa,UAGf,MAAMW,EAAgB3H,EAAUvK,KAAKC,IAEnC,IAAIkS,EAAejF,EAAgB7M,MAChCT,GACCA,EAAK0O,aAAerO,EAAKyN,OAAS9N,EAAK2O,gBAAkBtO,EAAK0N,WAGlE,OAAAhJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE,CAACyM,GAAee,EAAeA,EAAa9M,UAAY,KACxD,CAACgM,GAAcpR,EAAK0N,SACpB,CAAC2D,GAAgBa,EAAeA,EAAa1D,WAAa,KAC1D,CAAC8C,GAAaY,EAAeA,EAAaC,GAAK,MAG5CZ,GAAU,IACb9C,6BAA8BzO,EAAK,oCACnC0O,yBAA0B1O,EAAK,gCAC/B2O,0BAA2B3O,EAAK,gCAChC4O,2BAA4B5O,EAAK,kCACjC,UAAWA,EAAK,gBAIpBiS,EAAcG,MAAK,CAACC,EAAGC,IACjBD,EAAEb,WAAac,EAAEd,SACZa,EAAEb,SAASe,cAAcD,EAAEd,UAE7BgB,OAAOH,EAAEX,cAAgBc,OAAOF,EAAEZ,gBAG3ClS,QAAQK,IAAI,kBAAmBoS,GAC/B,MAEMrN,QAAiB1D,EAAAA,EAAAA,IAAU,OAD/B,2FACgD+Q,GAElDzS,QAAQK,IAAI,iCAAkC+E,GACtB,MAApBA,EAAS6N,QACXpG,EAAiBqG,EAAAA,IACjB1G,EAAY1B,GACZsB,GAAgB,KAEhBU,EAAeqG,EAAAA,IACf/G,GAAgB,KAyMJhL,KAAMA,EACN4J,eACmB,OAAjBmC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,mBAE9BpD,gBACmB,OAAjBkC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,oBAE9B3E,aAAcsD,EACd7K,MAAOA,EACP2I,UAAW2B,EACX1B,aA/MS9J,MAAOd,EAAMkJ,EAAQmB,KAC5CxK,QAAQK,IAAI,wCAAyCF,GACrDH,QAAQK,IAAI,qBAAsBgJ,GAClCrJ,QAAQK,IAAI,sBAAuBmK,GAEnC,MAAMoD,EAAczN,EAAKI,KAAK8H,IAAGnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC5BmD,GAAG,IACN,CAACgB,GAASmB,MAGZxK,QAAQK,IAAI,mBAAoBuN,GAChC5N,QAAQK,IAAI,iBAAkByK,GAG9B,MAAMsI,EAAatI,EAAUvK,KAAK8H,IAChC,MAAMgL,EAAazF,EAAYhN,MAC5B0S,GACCA,EAAQrF,QAAU5F,EAAI4F,OAASqF,EAAQpF,WAAa7F,EAAI6F,WAG5D,OAAOmF,GAA0BhL,KAGnCrI,QAAQK,IAAI,eAAgB+S,GAC5BzF,EAAgByF,OAyLJlV,EAAAA,EAAAA,KAACqV,EAAAA,EAAa,CAEZpT,KAAM2K,EACN9D,QAASA,EACTsJ,KAAM,CAAE3C,mBACRvM,KAAMA,EACN4J,eACmB,OAAjBmC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,mBAE9BpD,gBACmB,OAAjBkC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBkB,SAAS,oBAE9BoD,WAAW,uBACX+B,uBAAwB9G,GAZnBZ,e,aE/TvB,MA8EA,EA9EwB2H,KACtB,MAAM,WAAE3V,IAAe+N,EAAAA,EAAAA,MACjB,iBAAEgB,EAAgB,eAAEC,IAAmB1F,EAAAA,EAAAA,MACtCwE,EAAS8H,IAAcnM,EAAAA,EAAAA,WAAS,GAEvCvH,QAAQK,IAAI,kCAsEZ,OA7DAmH,EAAAA,EAAAA,YAAU,KACR,IAAKmM,OAAOC,OAAQ,OAqDpB5T,QAAQ6T,MAAM,+DACdF,OAAOC,OAAOE,SAAS,aAlDL7S,UAAa,IAAD8S,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMC,MAAM,MAGhCC,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BT,IACvBA,EAAMrQ,MACV+Q,GACCA,EAAK3R,SAAS,uBAAyB2R,EAAK3R,SAAS,mBAenD4R,CAAuBX,KAAWO,EAIpC,YAHApU,QAAQC,KACN,kFAOJoU,eAAeI,WAAW,sBAM1Bf,GAAW,GAEX,MACMgB,EADcC,EAAAA,EAAMC,WAEZ1H,cAAcC,kBAAkBmB,mBAE9C,GAAsB,OAAjBoG,QAAiB,IAAjBA,GAAuB,QAANX,EAAjBW,EAAmBvU,YAAI,IAAA4T,GAAO,QAAPC,EAAvBD,EAAyBtF,aAAK,IAAAuF,IAA9BA,EAAgCpU,OAMnC,OALAI,QAAQ2D,MACN,6EACA+Q,QAEFhB,GAAW,GAIb,UAIQmB,EAAAA,EAAAA,GAAkBH,EAAkBvU,KAAKsO,MAAO3Q,EACxD,CAAE,MAAO6F,GACP3D,QAAQ2D,MAAM,iDAA6CA,GAC3DmJ,EAAegI,EAAAA,GACjB,CAAC,QACCpB,GAAW,GACX7G,EAAiBkI,EAAAA,GACnB,OAOD,IAEInJ,GAAU1N,EAAAA,EAAAA,KAAC4S,EAAAA,EAAM,IAAM,M,QCrEhC,IAAIkE,EAAO,KAwFI,SAAS,IAGtB,GAAIrB,OAAOC,OAAQ,CAGjB,IAAIqB,GAAe,EAEnBtB,OAAOC,OAAOE,SAAS,UAAU,KAC3BmB,EACFjV,QAAQC,KACN,+EAIJgV,GAAe,EAtGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzC1B,OAAO0B,YAAcA,KAIvB,IAAIC,GACW,QAAbJ,EAAAvB,OAAOC,cAAM,IAAAsB,GAAM,QAANC,EAAbD,EAAetQ,YAAI,IAAAuQ,OAAN,EAAbA,EAAqBI,cAAc,WACnCC,SAASC,eAAe,QAGrBH,IACHA,EAAcE,SAASE,cAAc,OACrCJ,EAAYzV,GAAK,OACb8T,OAAOC,QAAUD,OAAOC,OAAOhP,KACjC+O,OAAOC,OAAOhP,KAAK+Q,YAAYL,GAG/BE,SAAS5Q,KAAK+Q,YAAYL,IAOzBN,IAEHA,EAAOY,EAAAA,WAAoBN,IAK7BN,EAAKa,QACHxX,EAAAA,EAAAA,MAACyX,EAAAA,GAAQ,CAACnB,MAAOA,EAAAA,EAAMvW,SAAA,EACrBF,EAAAA,EAAAA,KAACuV,EAAe,KAChBvV,EAAAA,EAAAA,KAACwN,EAAS,KACVxN,EAAAA,EAAAA,KAAC6X,EAAAA,GAAc,OAMrB,CAkEMC,MAEJ,MACEhW,QAAQ2D,MACN,sEAGN,EAtEA,WA2BE,GAAIgQ,OAAOsC,QAAUtC,OAAOsC,OAAOT,SAAU,CAC3C,IAAIU,EAAiBvC,OAAOsC,OAAOT,SAASE,cAAc,UAC1DQ,EAAeC,YA1BE,y1BA2BjBxC,OAAOsC,OAAOT,SAAS5Q,KAAK+Q,YAAYO,EAE1C,MACElW,QAAQC,KACN,qFAGN,CAGAmW,E","sources":["components/DragAndDrop/DragAndDrop.jsx","services/api/PlantAssignment/saveTableDataService.js","components/Popup/Popup.jsx","pages/BOSWidget/MassUpdateDropdown.jsx","pages/BOSWidget/BOSWidgetToolbarNativeCta.jsx","pages/BOSWidget/BOSWidget.jsx","pages/BOSWidget/BOSdataHelpers.js","pages/BOSWidget/WidgetLifecycle.jsx","pages/BOSWidget/bosIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst BOSWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button>\r\n      </div>\r\n\r\n      {/* Dropdown appears below */}\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BOSWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./BOSWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./BOSdataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\nimport BOSWidgetToolbarNativeCta from \"./BOSWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst BOSWidget = () => {\r\n  const { initializeDroppableArea, loading } = useBOSDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n        // SpecState need to be added.\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n        // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n        // something needs to be done here\r\n        // [ChildStateKey]:\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"bosWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <BOSWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"Bos_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BOSWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useBOSDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport BOSWidget from \"./BOSWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <BOSWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","extractIdsFromTitles","data","allPlants","log","newClasses","map","item","itemTitle","replace","matchedPlant","find","plant","toLowerCase","filter","handleRemoveData","async","removedTitles","productId","type","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","state","change","identifier","action","ErrorObject","forEach","classId","missingIn","child","includes","name","join","push","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","concat","filteredNewClasses","some","classifyUrl","classifyResponse","error","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","headers","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","body","method","Promise","resolve","reject","authenticatedRequest","_objectSpread","onComplete","response","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl","forwardRef","_ref","ref","columns","addedItem","CAName","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","e","target","value","col","disabled","val","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","showDropdown","setShowDropdown","handleSaveClick","MSG_BOS_SAVE","prev","MassUpdateDropdown","handleMassUpdate","scope","BOSWidget","initializeDroppableArea","loading","useBOSDropableArea","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","dispatch","useDispatch","showSuccessToast","showErrorToast","changedCells","selectedTableRows","useSelector","droppedObject","droppedObjectData","loadingParentDetails","plantObjectData","isDropped","bosData","BOSObjectData","bosSpecDocument","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","oldItem","Title","Revision","key","prevKey","cardData","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","getTableData","rowData","childTitle","childRevision","State","childState","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","IsLatest","childLatest","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","header","columnKey","getValue","_table$options$meta","updatedValue","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","BOSWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecName","Name","SpecRevision","SpecState","SpecID","ItemName","ItemRevision","ItemState","ItemID","formattedData","matchingData","ID","sort","a","b","localeCompare","Number","status","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","onSelectableRowsChange","WidgetLifecycle","setLoading","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","document","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}