{"version":3,"file":"static/js/20.5583d1eb.chunk.js","mappings":"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","sources":["services/api/PlantAssignment/fetchCsrfService.js","hooks/useToast.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Button/Button.jsx","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Loader/Loader.js"],"sourcesContent":["import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\n// import \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async () => {\r\n    try {\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      /// Extract attribute groups\r\n      // const attributeGroups = [\r\n      //   ...new Set(groupData.map((item) => item.groupNLS)),\r\n      // ];\r\n      // console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge only non-system API attributes with your hardcoded ones\r\n      const mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnMapping();\r\n  }, []);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useEffect } from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n\r\n  const { mappedAttributes } = useMassUpload(); // Gets UI/backend name mappings\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n  useEffect(() => {\r\n    if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n      console.log(\"Mapped Attributes updated:\", mappedAttributes);\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    // Simple case-insensitive exact matching\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table\r\n  // ...existing code...\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // Get all currently selected values except for the current column\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader) // Exclude current column\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // Filter out options that are already selected in other columns\r\n    return dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n  };\r\n\r\n  // ...existing code...\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    // Get backend name for the selected UI label\r\n    const backendName = getBackendNameForUILabel(value);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  // ...existing code...\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        // Only disable if BOTH conditions are true: has NLS match AND is mandatory\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  // ...existing code...\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)} // Pass as a function\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n//import useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n  const { mappedAttributes } = useMassUpload();\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async () => {\r\n    try {\r\n      console.log(\"Fetching document data from API...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"CSRF Headers:\", headers);\r\n      const body = {\"type\":\"Document\",\"preferedType\":\"Document\",\"typeName\":\"Document\",\"subTypes\":true,\"runUXBL\":true,\"metrics\":{\"UXName\":\"New\",\"client_app_domain\":\"3DEXPERIENCE 3DDashboard\",\"client_app_name\":\"ENXWDOC_AP\"}};\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\"POST\", API_URL, body, headers);\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\"Failed to fetch document data. Invalid response structure.\");\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\"Extracted Document Info:\", documentInfo);\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDocumentData();\r\n  }, []);\r\n\r\n  return { documentData, refreshData: fetchDocumentData };\r\n};\r\n\r\nexport default useFetchDocumentData;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/uploadDocument\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\n// Replace the transformSheetDataWithMappings function with this implementation\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData // Add this parameter\r\n) => {\r\n  // Debug log column names and some sample values\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n\r\n  // Extract group information from mappedAttributes\r\n  // const { mappedData = [], attributesByGroup = {} } =\r\n  //   mappedAttributesData || {};\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped attributes data in mass upload:\", mappedAttributesData);\r\n  // console.log(\"Attributes by group in mass upload:\", attributesByGroup);\r\n  console.log(\"Mapped data in massupload:\", mappedAttributesData.mappedData);\r\n\r\n  // Debug full structure\r\n  console.log(\"Full mapped attributes structure:\", mappedAttributesData);\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  // The correct data is in mappedData array, not mappedAttributesData.mappedData\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  const attributeGroupMap = {};\r\n  if (Array.isArray(mappedData)) {\r\n    mappedData.forEach((option) => {\r\n      attributeGroupMap[option.backendName] = option.group || \"System\";\r\n      console.log(\r\n        `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n      );\r\n    });\r\n  }\r\n\r\n  console.log(\r\n    \"Backend name mapping for title:\",\r\n    mappedData.find((attr) => attr.backendName === \"title\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for description:\",\r\n    mappedData.find((attr) => attr.backendName === \"description\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for collabspaceTitle:\",\r\n    mappedData.find((attr) => attr.backendName === \"collabspaceTitle\")\r\n  );\r\n\r\n  // Update the getPathForAttribute function in transformSheetDataWithMappings\r\n\r\n  const getPathForAttribute = (backendName, columnName) => {\r\n    // ROOT LEVEL ATTRIBUTES - These always go at the root\r\n    if (\r\n      backendName === \"title\" ||\r\n      backendName === \"type\" ||\r\n      backendName === \"classificationType\" ||\r\n      backendName === \"collabspaceTitle\" // This needs special handling\r\n    ) {\r\n      // Special case for collabspaceTitle - map to collabspace at root level\r\n      if (backendName === \"collabspaceTitle\") {\r\n        console.log(\"collabspaceTitle mapped to root collabspace\");\r\n        return \"collabspaceTitle\";\r\n      }\r\n\r\n      console.log(`${backendName} placed at root level`);\r\n      return backendName;\r\n    }\r\n\r\n    // EIN NUMBER - Always goes to dseng:EnterpriseReference.partNumber\r\n    if (\r\n      columnName === \"EIN Number\" ||\r\n      backendName === \"PartNumber\" ||\r\n      backendName === \"Part Number\"\r\n    ) {\r\n      console.log(\r\n        \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n      );\r\n      return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n    }\r\n\r\n    // DESCRIPTION - Always goes in attributes\r\n    if (backendName === \"description\") {\r\n      console.log(\"Description mapped to attributes.description\");\r\n      return \"attributes.description\";\r\n    }\r\n\r\n    // All other attributes based on their group\r\n    const group = attributeGroupMap[backendName];\r\n    console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n    // Skip attributes with unknown groups\r\n    if (!group) {\r\n      console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n      return null; // Return null instead of a path\r\n    }\r\n\r\n    if (group === \"System Attributes\") {\r\n      // System attributes go directly under attributes\r\n      return `attributes.${backendName}`;\r\n    } else {\r\n      // All other attributes go to dseno:EnterpriseAttributes\r\n      return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n    }\r\n  };\r\n\r\n  // Transform each row in the sheet data\r\n  const transformedItems = sheetData.map((row) => {\r\n    // Initialize the structure with empty nested objects\r\n    const transformedRow = {};\r\n\r\n    // Process each cell in the row\r\n    Object.entries(row).forEach(([columnName, value]) => {\r\n      // Skip unmapped columns\r\n      if (!columnMappings[columnName]) return;\r\n\r\n      const uiLabelBackendName = columnMappings[columnName];\r\n\r\n      // Special case lookup for system attributes\r\n      const systemAttributeMappings = {\r\n        Title: \"title\",\r\n        Description: \"description\",\r\n        \"Collaborative Space\": \"collabspaceTitle\",\r\n        \"Collab Space\": \"collabspaceTitle\",\r\n        Type: \"type\",\r\n      };\r\n\r\n      // If the mapping contains a UI label instead of backend name, convert it\r\n      const backendName =\r\n        systemAttributeMappings[uiLabelBackendName] ||\r\n        mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n          ?.backendName ||\r\n        uiLabelBackendName;\r\n\r\n      const path = getPathForAttribute(backendName, columnName);\r\n\r\n      // Add this debug log\r\n      if (\r\n        backendName === \"title\" ||\r\n        backendName === \"description\" ||\r\n        backendName.toLowerCase() === \"collabspace\"\r\n      ) {\r\n        console.log(`Placing ${backendName} at path: ${path}`);\r\n      }\r\n\r\n      // Skip if no path determined\r\n      if (!path) return;\r\n\r\n      // Build the nested structure\r\n      const pathParts = path.split(\".\");\r\n      let current = transformedRow;\r\n\r\n      // Create nested objects\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        const part = pathParts[i];\r\n        if (!current[part]) {\r\n          current[part] = {};\r\n        }\r\n        current = current[part];\r\n      }\r\n\r\n      // Set the value at the final path location\r\n      current[pathParts[pathParts.length - 1]] = value;\r\n    });\r\n\r\n    // Handle physical product type determination\r\n    if (operationType === \"1\") {\r\n      // Find the column header regardless of case\r\n      const productTypeColumn = Object.keys(row).find(\r\n        (key) =>\r\n          key.toLowerCase().includes(\"physical product\") ||\r\n          key.toLowerCase().includes(\"raw material\")\r\n      );\r\n\r\n      if (productTypeColumn && row[productTypeColumn]) {\r\n        const productType = row[productTypeColumn].toLowerCase().trim();\r\n        transformedRow.type = productType.includes(\"physical product\")\r\n          ? \"VPMReference\"\r\n          : productType.includes(\"raw material\")\r\n          ? \"Raw_Material\"\r\n          : \"\";\r\n\r\n        console.log(\r\n          `Product type determined: ${transformedRow.type} from value: ${row[productTypeColumn]}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // For document, default type to \"Document\"\r\n    if (operationType === \"3\" && !transformedRow.type) {\r\n      transformedRow.type = \"Document\";\r\n    }\r\n\r\n    return transformedRow;\r\n  });\r\n\r\n  // Add this before returning the final result\r\n  if (transformedItems.length > 0) {\r\n    console.log(\r\n      \"Sample transformed item structure:\",\r\n      JSON.stringify(transformedItems[0], null, 2)\r\n    );\r\n  }\r\n\r\n  // Prepare data in chunks for API submission\r\n  const CHUNK_SIZE = 1000;\r\n  const chunks = [];\r\n\r\n  for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n    chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n  }\r\n\r\n  return {\r\n    chunks,\r\n    totalChunks: chunks.length,\r\n    totalItems: transformedItems.length,\r\n    originalData: sheetData,\r\n    mappings: columnMappings,\r\n  };\r\n};\r\n// Generate automatic column mappings\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  // Helper function to check if column has matching NLS\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  // Special mappings for system attributes to ensure they use correct backend names\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabspaceTitle\",\r\n    \"Collab Space\": \"collabspaceTitle\",\r\n    Type: \"type\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  // Then modify the getBackendNameForHeader function\r\n  const getBackendNameForHeader = (header) => {\r\n    // First check if it's a system attribute we want to hardcode\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    // Also check case-insensitive for system attributes\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    // Otherwise use dropdown options\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  // Special mapping for known attributes that might not have NLS matches\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  // Process all column headers\r\n  columnHeaders.forEach((columnName) => {\r\n    // Column was not manually mapped\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n    // Then handle columns with NLS matches OR mandatory columns\r\n    else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const { mappedAttributes, refreshMapping } = useMassUpload();\r\n  const { documentData, refreshData } = useFetchDocumentData();\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      // Map sheet data to JSON format with operation type\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        // // Generate initial mapping with default column names\r\n        // const mappedData = mapsheetData(sheetData, operationChoice);\r\n        // console.log(\"Mapped JSON data:\", mappedData);\r\n\r\n        // // Store original data for potential future manual mapping\r\n        // mappedData.originalData = sheetData;\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        // Once mappedAttributes is refreshed, apply automatic mapping\r\n        await refreshMapping(operationChoice);\r\n        await refreshData(operationChoice);\r\n\r\n        // Apply automatic column mapping (wait for mappedAttributes to be updated)\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            // Generate mappings automatically\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            // Apply mappings to transform the data\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes // Pass mappedAttributes here\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500); // Small delay to ensure mappedAttributes is ready\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null); // Add this line\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value); // Debug log\r\n    setOperationChoice(value);\r\n    // Add this line to fetch mapping data when operation changes\r\n    refreshMapping(value);\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks } = formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        try {\r\n          const chunk = chunks[i];\r\n          const response = await api.post(endpoint, {\r\n            items: chunk,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            successCount++;\r\n            if (i % 5 === 0) {\r\n              // Show progress every 5 chunks\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${totalChunks} chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`Chunk ${i + 1} failed:`, error);\r\n          failureCount++;\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          // Store the column mappings\r\n          const columnMappings = mappings;\r\n\r\n          // Transform the sheet data using the column mappings\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes // Pass mappedAttributes here\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n"],"names":["fetchCsrfToken","async","securityContext1","window","widget","getValue","WAFData","loadWAFData","console","log","csrfURL","process","response","Promise","resolve","reject","authenticatedRequest","method","type","onComplete","onFailure","csrfToken","csrf","name","csrfValue","value","securityContextHeader","securityContextValue","error","useToast","showToast","_ref","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","_objectSpread","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","errors","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","index","style","parent","_jsx","CellMeasurer","columnIndex","rowIndex","children","_jsxs","className","width","map","column","i","err","ReusableAlert","variant","_Fragment","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","show","onHide","CustomModal","title","footerButtons","label","onClick","ErrorPopup","size","disabled","text","imageSrc","props","Button","src","alt","marginRight","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","_config$MassUpload$ma","_config$MassUpload$ma2","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","headers","Array","isArray","reader","FileReader","readAsBinaryString","onload","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","valueToValidate","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","defaultLabel","list","option","attrIndex","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","useMassUpload","mappedAttributes","setMappedAttributes","ENOVIA_BASE_URL","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","allNLSValues","Set","filteredGroupData","filter","attr","relevantAttributes","deploymentExtension","mappedData","backendName","group","attributesByGroup","find","useEffect","refreshMapping","selectedMappings","setSelectedMappings","keys","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","hasMatchingNLS","isMandatory","columnHeader","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","_","mapping","prepareDropdownOptions","onColumnsMapped","existingMappings","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","useFetchDocumentData","documentData","setDocumentData","API_URL","fetchDocumentData","body","status","documentInfo","refreshData","API_ENDPOINTS","transformSheetDataWithMappings","operationType","mappedAttributesData","attributeGroupMap","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Title","Description","Type","path","getPathForAttribute","pathParts","part","productTypeColumn","productType","JSON","stringify","totalChunks","totalItems","originalData","mappings","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Loader","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","api","post","items","finalMessage","ColumnMappingModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","Alert","Modal","centered","Header","closeButton","Body","Footer","btn"],"sourceRoot":""}