{"version":3,"file":"static/js/298.4a9930bf.chunk.js","mappings":"uTAQA,MA8EA,EA9EwBA,KACtB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MACjB,iBAAEC,EAAgB,eAAEC,IAAmBC,EAAAA,EAAAA,MACtCC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GAEvCC,QAAQC,IAAI,kCAsEZ,OA7DAC,EAAAA,EAAAA,YAAU,KACR,IAAKC,OAAOC,OAAQ,OAqDpBJ,QAAQK,MAAM,+DACdF,OAAOC,OAAOE,SAAS,aAlDLC,UAAa,IAADC,EAAAC,EAC5B,MAAMJ,GAAQ,IAAIK,OAAQC,MAAMC,MAAM,MAGhCC,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BV,IACvBA,EAAMW,MACVC,GACCA,EAAKC,SAAS,uBAAyBD,EAAKC,SAAS,mBAenDC,CAAuBd,KAAWQ,EAIpC,YAHAb,QAAQoB,KACN,kFAOJN,eAAeO,WAAW,sBAM1BvB,GAAW,GAEX,MACMwB,EADcC,EAAAA,EAAMC,WAEZC,cAAcC,kBAAkBC,mBAE9C,GAAsB,OAAjBL,QAAiB,IAAjBA,GAAuB,QAANd,EAAjBc,EAAmBM,YAAI,IAAApB,GAAO,QAAPC,EAAvBD,EAAyBqB,aAAK,IAAApB,IAA9BA,EAAgCqB,OAMnC,OALA9B,QAAQ+B,MACN,6EACAT,QAEFxB,GAAW,GAIb,UAIQkC,EAAAA,EAAAA,GAAkBV,EAAkBM,KAAKC,MAAOrC,EACxD,CAAE,MAAOuC,GACP/B,QAAQ+B,MAAM,iDAA6CA,GAC3DpC,EAAesC,EAAAA,GACjB,CAAC,QACCnC,GAAW,GACXJ,EAAiBwC,EAAAA,GACnB,OAOD,IAEIrC,GAAUsC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAAK,M,yFC/ExB,MAAMC,EAAgBC,IAKtB,IALuB,OAC5BC,EAAS,GAAE,OACXC,EAAM,aACNC,EAAY,kBACZC,GACDJ,EAEC,OADAtC,QAAQC,IAAI,iCAAkCsC,GACnC,OAANA,QAAM,IAANA,GAAAA,EAAQT,QAGXK,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,SACGL,EAAOM,KAAKC,IACXC,EAAAA,EAAAA,MAAA,QAEEC,MAAO,CACLC,YAAa,MACbC,QAAS,cACTC,WAAY,SACZC,MAAON,EAAMM,OAAS,QACtBC,WAAY,QACZT,SAAA,CAEDE,EAAMQ,UACNb,GAAyC,YAAzBK,EAAMS,iBACrBpB,EAAAA,EAAAA,KAACqB,EAAAA,IAAc,CACbC,KAAM,GACNT,MAAO,CAAEU,OAAQ,UAAWN,MAAO,MAAOO,WAAY,OACtDC,QAASA,IAAMlB,EAAkBF,EAAQM,EAAMe,aAd9Cf,EAAMe,aANS,OA0DjBC,EAAeA,CAACC,EAAWC,EAAMC,KAC5CjE,QAAQC,IAAI,qBAAqBgE,GAE5BF,EAEEA,EAAUlB,KAAKjB,GACP,kBAAToC,EACK,CACLE,UAAc,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,YAAa,MAC7BC,OAAW,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMyC,aAAc,GAC3BC,QAAY,OAAJ1C,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,SAAU,QAG1BtE,QAAQC,IAAI,0BAA8B,OAAJ2B,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,SAAUN,EAAOO,QAAS,OAE/D,CACLJ,OAAW,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,QAAS,MACtBC,KAAS,OAAJ9C,QAAI,IAAJA,OAAI,EAAJA,EAAM8C,MAAO,IAClBC,QAAY,OAAJ/C,QAAI,IAAJA,OAAI,EAAJA,EAAMgD,cAAe,UAC7B,cAAkB,OAAJhD,QAAI,IAAJA,OAAI,EAAJA,EAAMiD,YAAa,MACjC,cAAkB,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,YAAa,MACjCP,QAAY,OAAJ3C,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,SAAUN,EAAOO,QAAS,MACxC,iBAAqB,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMmD,eAAgBd,EAAOe,UAAW,MACzD,kBAAmBpD,EAAKqD,gBAAkB,MAC1C,aAAc,SACd,aAAc,MACd,cAAc,EACdC,KAAMtD,EAAKuD,KAAO,OAAS,MAC3B,aAAc,OAzBG,IA+EZC,EAAgB,CAC3B,CAAEC,YAAa,kBAAmBC,OAAQ,oB,0CCzI5C,MA8KA,EA9KwChD,IAYjC,IAZkC,WACvCiD,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZpB,EAAM,MACNqB,EAAK,KACL7B,EAAI,QACJ8B,EAAO,OACP7B,GACD3B,EACC,MAAM,iBAAEyD,EAAgB,iBAAErG,IAAqBE,EAAAA,EAAAA,KACzCoG,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoBpG,EAAAA,EAAAA,WAAS,GAC7CqG,GAAoBC,EAAAA,EAAAA,UA6B1BrG,QAAQC,IAAI,uBAAwB0F,GAiCpC,OACE5C,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,EACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,sBAAqB1D,SAAA,EAChCkD,IACA3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAASA,KACHoC,EAAeH,GACjBE,EAAiBQ,EAAAA,IAIN,kBAATvC,GAEOQ,EADT2B,GAAiB,GAIjBJ,EADmB,aAAVF,EACQW,EAAAA,GAEAC,EAAAA,KAEnB7D,SACH,cAIFkD,IACC3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAASA,KACO,aAAViC,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDE,EAAiBQ,EAAAA,IAEjBJ,GAAiB,IAEnBvD,SACH,sBAKO,kBAAToB,IACC7B,EAAAA,EAAAA,KAAA,UACEmE,UAAU,qCACV1C,QAxGc8C,KAClBV,EAAeH,GACjBE,EAAiBQ,EAAAA,IAIfd,IAAoB,kBAATzB,GAA4BQ,GACzCiB,IAEAM,EADmB,aAAVF,EACQc,EAAAA,GAEAC,EAAAA,KA6FchE,SAC1B,UAIDkD,IACF3D,EAAAA,EAAAA,KAAA,UACEmE,UAAU,oCACV1C,QA/FaiD,KACfb,EAAeH,GACjBE,EAAiBQ,EAAAA,IAGfb,GACFA,KAyF0B9C,SACvB,eAMHT,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CACVC,KAAMb,EACNc,OAAQA,IAAMb,GAAiB,GAC/B1B,MAAM,kBACNwC,cAAe,CACb,CACEC,MAAO,MACPC,QAAS,UACTvD,QAASA,KAAO,IAADwD,EACY,QAAzBA,EAAAhB,EAAkBiB,eAAO,IAAAD,GAAzBA,EAA2BE,WAC3BnB,GAAiB,KAGrB,CACEe,MAAO,QACPC,QAAS,SACTvD,QAASA,IAAMuC,GAAiB,KAElCvD,UAEFT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,aAAY1D,UACzBT,EAAAA,EAAAA,KAACoF,EAAAA,EAAc,CACbC,IAAKpB,EACLxE,KAAM+D,EACN8B,QAAS7B,EACTpB,OAAQA,EACRkD,UApHU9F,IAElB,GADA5B,QAAQC,IAAI2B,GACC,kBAAToC,EACEpC,EAAKE,OAAS,IAChByD,EAAW3D,GACX4D,EAAW5D,SAGb,GAAIA,EAAKE,OAAS,EAAG,CACnB,MAAM6F,EAAW/F,EAAKiB,KAAK4B,IAAK,CAC9BA,MAAOA,EACPC,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACdJ,OAAQN,EAAOO,OACf,gBAAiBP,EAAOe,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdE,KAAM,MACN,aAAc,OAEhBK,EAAWoC,GAEXnC,EAAW5D,EACb,GA0FMiE,MAAOA,Y,wEC3KnB,MA4HA,EA5H6BvD,IAOtB,IAPuB,sBAC5BsF,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACD3F,EACC,MAAM,WAAE9C,IAAeC,EAAAA,EAAAA,MACjB,cAAEyI,IAAkBC,EAAAA,EAAAA,KAyC1B,OACEhG,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,UACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,2BAA0B1D,SAAA,EACvCT,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJpF,MAAO,CAAEqF,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJlC,UAAU,iBAEZnE,EAAAA,EAAAA,KAAA,QAAMmE,UAAU,qBAAoB1D,SAAC,mBACrCG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,oBAAmB1D,SAAA,EAChCT,EAAAA,EAAAA,KAAA,MAAImE,UAAU,aACdnE,EAAAA,EAAAA,KAAA,QAAMmE,UAAU,eAAc1D,SAAC,QAC/BT,EAAAA,EAAAA,KAAA,MAAImE,UAAU,gBAEhBnE,EAAAA,EAAAA,KAACsG,EAAAA,EAAW,CAACC,SArDGC,IAmCpBT,EAAcS,EAlCK,CACjBlE,MAAO,SACPmE,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAC3BtJ,QAAQC,IAAI,oBAAqBqJ,GACjCtJ,QAAQC,IAAI,kCAAmCqJ,EAAgB,GAAGC,IAEhED,GACAA,EAAgBxH,OAAS,GACzBwH,EAAgB,GAAGC,GAEnB/J,EAAW,CACT,CACEgK,SAAUF,EAAgB,GAAGC,GAC7BE,WAAYH,EAAgB,GAAG,sBAInCtJ,QAAQoB,KAAK,gDAuBbe,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,OAAM9G,UACfG,EAAAA,EAAAA,MAAA,OAAK2G,MAAM,6BAA4B9G,SAAA,EACrCT,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CACLxC,QAAQ,eACRvD,QAASA,KACP,MAAMgG,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KACH,wFACFH,EAAKI,SAAW,iCAChBJ,EAAKK,SACLrH,SACH,yBAIHT,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAAC+H,EAAAA,EAAKC,MAAK,CAACC,UAAU,mBAAkBxH,UACtCT,EAAAA,EAAAA,KAAC+H,EAAAA,EAAKG,QAAO,CACXrG,KAAK,OACLsG,UAAQ,EACRC,SAAU3C,EACV4C,SAAU1C,EACVN,IAAKK,SAIX1F,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACxC,QAAQ,iBAAiBvD,QAASqE,EAAYrF,UACpDT,EAAAA,EAAAA,KAACsI,EAAAA,EAAe,CAACC,KAAMC,EAAAA,WAG3BxI,EAAAA,EAAAA,KAAA,OAAKuH,MAAM,yBAAwB9G,UACjCT,EAAAA,EAAAA,KAAA,OACEa,MAAO,CACLE,QAAS,eACTQ,OAAQsE,EAAyB,cAAgB,WACjDpF,UAEFT,EAAAA,EAAAA,KAACwH,EAAAA,EACC,CACAxC,QACEa,EAAyB,YAAc,kBAEzCpE,QAASmE,EACTyC,SAAUxC,EAAwBpF,SACnC,2C,kFCq/BjB,EApjCwBgI,KACtB,MAAM,6BAAEC,EAA4B,2BAAEC,IACpCC,EAAAA,EAAAA,MACKC,EAAeC,IAAoBlL,EAAAA,EAAAA,WAAS,IAC5CmL,EAAeC,IAAoBpL,EAAAA,EAAAA,UAAS,OAC5CqL,EAAiBC,IAAsBtL,EAAAA,EAAAA,WAAS,IAChDuL,EAAkBC,IAAuBxL,EAAAA,EAAAA,UAAS,KACnD,wBAAEyL,EAAuB,QAAE3L,IAAYJ,EAAAA,EAAAA,MACtCgM,EAAUC,IAAe3L,EAAAA,EAAAA,UAAS,IAClCgE,EAAW4H,IAAgB5L,EAAAA,EAAAA,UAAS,KACpC6L,EAAeC,IAAoB9L,EAAAA,EAAAA,UAAS,KAC5C+L,EAAeC,IAAoBhM,EAAAA,EAAAA,UAAS,OAC5CiM,EAAYC,IAAiBlM,EAAAA,EAAAA,UAAS,KACtCmM,EAAoBC,IAAyBpM,EAAAA,EAAAA,UAAS,KACtD+H,EAAqBsE,IAA0BrM,EAAAA,EAAAA,WAAS,IACxDiI,EAAwBqE,KAA6BtM,EAAAA,EAAAA,WAAS,IAC/D,WAAEP,KAAeC,EAAAA,EAAAA,MAGhB6M,GAAgBC,KAAqBxM,EAAAA,EAAAA,WAAS,IAC9CyM,GAAcC,KAAmB1M,EAAAA,EAAAA,WAAS,IAC1C2M,GAAqBC,KAA0B5M,EAAAA,EAAAA,WAAS,IACxD0C,GAAcmK,KAAmB7M,EAAAA,EAAAA,WAAS,GAC3C8M,IAAWC,EAAAA,EAAAA,OACX,iBAAEpN,GAAgB,eAAEC,KAAmBC,EAAAA,EAAAA,KAC7C,IAAImN,GAAmB5M,OAAOC,OAAO4M,SAAS,eAC9ChN,QAAQC,IAAI,wBAAyB8M,IAErC,MAAMlF,IAAexB,EAAAA,EAAAA,QAAO,MAgKtB3D,IAAoBuK,EAAAA,EAAAA,cACxB,CAACzK,EAAQ0K,KACPf,GAAuBpI,GACrBA,EAAUlB,KAAKsK,GACbA,EAAK7I,SAAW9B,GAAM4K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEbD,GAAI,IACP9I,WAAY8I,EAAK9I,WAAWxB,KAAKC,GAC/BA,EAAMe,UAAYqJ,GAAOE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhBtK,GAAK,IACRM,MAAuB,QAAhBN,EAAMM,MAAkB,QAAU,QAE3CN,MAGRqK,QAIV,CAAChB,IAyKGkB,GAAoBtJ,IACxB,MAAMuJ,EAAYvJ,EAAUlB,KAAK0K,IAAG,CAClCC,SAAUD,EAAIrJ,SACduJ,UAAWF,EAAInJ,UAGjB,OADApE,QAAQC,IAAI,wBAAyBqN,GAC9BA,GAGTtN,QAAQC,IAAI,2BAA4B8D,GACxC,MAAM2J,IAAoBC,EAAAA,EAAAA,KACvB9H,GAAUA,EAAMpE,cAAciM,oBAG3BhM,IAAoBiM,EAAAA,EAAAA,KACvB9H,GAAUA,EAAMpE,cAAcC,oBAEjC1B,QAAQC,IAAI,oBAAqByB,IAIjC,MAAMkM,IAAgBD,EAAAA,EAAAA,KACnB9H,GAAUA,EAAMpE,cAAcoM,oBAAoBD,gBAErD5N,QAAQC,IAAI,2BAA4B2N,IAExC,MAAME,IAAcH,EAAAA,EAAAA,KACjB9H,GAAUA,EAAMpE,cAAcoM,oBAAoBE,cAErD/N,QAAQC,IAAI,0BAA2B6N,IACvC,MAAME,IAAYL,EAAAA,EAAAA,KACf9H,GAAUA,EAAMpE,cAAcoM,oBAAoBI,YAErDjO,QAAQC,IAAI,yBAA0B+N,IAEtC,MAAMlI,IAAU6H,EAAAA,EAAAA,KACb9H,GAAUA,EAAMpE,cAAcoM,oBAAoBK,YAErDlO,QAAQC,IAAI,oBAAqB6F,IACjC,MAAMqI,IAAuBR,EAAAA,EAAAA,KAC1B9H,GAAUA,EAAMpE,cAAc0M,uBAEjCnO,QAAQC,IAAI,yBAA0BkO,IACtC,MAAMC,IAAkBT,EAAAA,EAAAA,KACrB9H,GAAUA,EAAMpE,cAAc4M,gBAAgBD,kBAEjDpO,QAAQC,IAAI,wBAAyBmO,IAErC,MAAME,IAAYX,EAAAA,EAAAA,KAAa9H,GAAUA,EAAMpE,cAAc6M,YAEvDC,IAAYZ,EAAAA,EAAAA,KACf9H,GAAUA,EAAMpE,cAAc4M,gBAAgBE,YAEjDvO,QAAQC,IAAI,wCAAyCsO,IAMrD,MAAMC,IAAcb,EAAAA,EAAAA,KACjB9H,GAAUA,EAAMpE,cAAc4M,gBAAgBI,eAEjDzO,QAAQC,IAAI,oCAAqCuO,IAEjD,MAAME,IAAef,EAAAA,EAAAA,KAClB9H,GAAUA,EAAMpE,cAAc4M,gBAAgBM,wBAEjD3O,QAAQC,IAAI,2BAA4ByO,IAExC,MAAMzK,IAAS0J,EAAAA,EAAAA,KACZ9H,GAAUA,EAAMpE,cAAc4M,gBAAgBpK,SAEjDjE,QAAQC,IAAI,qBAAsBgE,IAElC,MAAM2K,IAAkBjB,EAAAA,EAAAA,KACrB9H,GAAUA,EAAMpE,cAAc4M,gBAAgBO,kBAEjD5O,QAAQC,IAAI,uCAAwC2O,IACpD,MAAMpK,IAASmJ,EAAAA,EAAAA,KACZ9H,GAAUA,EAAMpE,cAAc4M,gBAAgB7J,SAEjDxE,QAAQC,IAAI,6BAA8BuE,IAE1C,MAAMqK,IAAUlB,EAAAA,EAAAA,KACb9H,GAAUA,EAAMpE,cAAc4M,gBAAgBQ,UAEjD7O,QAAQC,IAAI,mCAAoC4O,IAEhD,MAAMC,IAAiB7B,EAAAA,EAAAA,cAAY,KACjC,IAAIsB,EAAYT,GAAYjL,KAAKsK,GAC/BA,EAAK1I,MAAMsK,QAAQ,UAAW,MAGhC,MAAMC,EACyB,IAA7BtB,GAAkB5L,OAAeiC,EAAY2J,GAE/C,IAAIuB,EAAsB,IACrB,IAAIC,IACLF,EAAWG,SAAShC,IAAI,IAAAiC,EAAA,OAAe,QAAVA,EAAAjC,EAAK/I,aAAK,IAAAgL,OAAA,EAAVA,EAAYvM,KAAKwM,GAAMA,EAAE/L,cAAc,QAIpEgM,EAAoBf,EACrBgB,QAAQzM,IAAWmM,EAAoB/N,SAAS4B,KAChDD,KAAKC,IAAK,CAAQ2B,MAAO3B,MAK5B,OAHA9C,QAAQC,IAAI,4BAA6BqP,GAGlCf,EAAU1L,KAAKC,IAAK,CAAQ2B,MAAO3B,QACzC,CAACgL,GAAa/J,EAAW2J,GAAmB5H,KAGzC0J,GAAmBC,IACvB9D,EAAa8D,IAUf,GAPAzP,QAAQC,IAAI,kBAAmB8D,IAE/B7D,EAAAA,EAAAA,YAAU,KACJ6D,EAAUjC,QAAU,GACtB4J,GAAagE,GAAYA,EAAU,MAEpC,CAAC3L,IACArC,GAAkBiO,UAAYjO,GAAkBC,mBAAqB,IAADiO,GAAAC,GAClEhK,GAAQnE,GAAkBiO,SAAS,kBACnCG,GAAUpO,GAAkBiO,SAAkB,QAC9C3L,GAA2C,QAAvC4L,GAAGlO,GAAkBC,0BAAkB,IAAAiO,IAAM,QAANC,GAApCD,GAAsChO,YAAI,IAAAiO,QAAN,EAApCA,GAA4ChO,MAAM,GAAG4H,WAGlE,MAAOsG,GAA2BC,KAChCjQ,EAAAA,EAAAA,UAAS2O,IACX1O,QAAQC,IACN,0CACA8P,KAEF7P,EAAAA,EAAAA,YAAU,KACR8P,GAA6BtB,IAChB,kBAAT1K,GACFmI,EAAsByB,IAEtB/B,EAAiB6C,MAElB,CAACA,GAAc1K,GAAM4J,MAExB1N,EAAAA,EAAAA,YAAU,KACK,kBAAT8D,IACFiI,EAAc6C,QAEf,CAACA,GAAgB9K,MAmBpB9D,EAAAA,EAAAA,YAAU,KACK,kBAAT8D,IACFiI,EAAcuC,MAEf,CAACA,GAAaxK,KACjB,MAAMyB,GAASlF,UAAsB,IAAD0P,EAAAC,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BpQ,QAAQC,IAAI,aAAc8D,GAC1B/D,QAAQC,IAAI,oCAAqC8P,IACjD,IAAIM,EAAa,GAEbC,EAAyBP,GAA0BlN,KAAK0N,IAC1D,IAAIC,GAAYpD,EAAAA,EAAAA,GAAA,GAAQmD,GAsCxB,OApCAxM,EAAU0M,SAASC,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAMnD,EAAYiD,EAAUtM,MAAM2K,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGI8B,EAEL,QAFYF,EAAGpC,GAAUuC,MACvBC,GAAcA,EAAUtM,QAAUiM,EAAUtM,eAC9C,IAAAuM,OAAA,EAFeA,EAEbpH,GAEH,GAAIiH,EAAa/L,QAAUiM,EAAUtM,MAAO,EACxBoM,EAAarL,KAAO,OAAS,SAG7BuL,EAAUxL,OACtB,MAAM8L,KAAKvD,IACb0C,EAAa,OAADc,OAAQxD,IAAkC,SAAnBiD,EAAUxL,KAC7C0L,EAASM,SAAQ,OAAAD,OAAUxD,GAC3BmD,EAASO,UAA+B,SAAnBT,EAAUxL,OAE/BiL,EAAa,GAADc,OAAIxD,EAAS,SAA6B,SAAnBiD,EAAUxL,KAC7C0L,EAASM,SAAQ,GAAAD,OAAMxD,EAAS,QAChCmD,EAASO,UAA+B,SAAnBT,EAAUxL,MAEjCsL,EAAarL,KAA0B,SAAnBuL,EAAUxL,KAC9B0L,GAAQxD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHwD,GAAQ,IACXrH,GAAIsH,EACJpM,MAAOiM,EAAUtM,MACjBgN,KAAM,WAERf,EAAWgB,KAAKT,GAEpB,KAEKJ,KAITzM,EAAU0M,SAASC,IAKjB,IAJqBX,GAA0Be,MAC5CQ,GAAiBA,EAAa7M,QAAUiM,EAAUtM,QAGlC,CAAC,IAADmN,EACjB,MAAM9D,EAAYiD,EAAUtM,MAAM2K,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEI8B,EAEL,QAFYU,EAAGhD,GAAUuC,MACvBC,GAAcA,EAAUtM,QAAUiM,EAAUtM,eAC9C,IAAAmN,OAAA,EAFeA,EAEbhI,GAEH,GAAIsH,EAAS,CACX,IAAIW,EAAc,CAAEjI,GAAIsH,EAASpM,MAAOiM,EAAUtM,OAC9CwM,EAAW,CAAC,EAChBR,EAAsBiB,KAAKR,GAEJ,SAAnBH,EAAUxL,MACR,MAAM8L,KAAKvD,IACb0C,EAAa,OAADc,OAAQxD,KAAe,EACnCmD,EAASM,SAAQ,OAAAD,OAAUxD,KAE3B0C,EAAa,GAADc,OAAIxD,EAAS,UAAU,EACnCmD,EAASM,SAAQ,GAAAD,OAAMxD,EAAS,SAElC+D,EAAYrM,MAAO,EACnByL,EAASO,WAAY,IAErBK,EAAYrM,MAAO,EACnByL,EAASO,WAAY,GAGvBb,EAAuBe,KAAKG,GAC5BZ,GAAQxD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHwD,GAAQ,IACXrH,GAAIsH,EACJpM,MAAOiM,EAAUtM,MACjBgN,KAAM,QAERf,EAAWgB,KAAKT,EAClB,CACF,KAGF,IAAIa,EAAe,GACnB1B,GAA0BU,SAASa,IAIjC,IAH0BvN,EAAU/C,MACjC0P,GAAcA,EAAUtM,QAAUkN,EAAa7M,QAE5B,CAAC,IAADiN,EACpB,MAAMb,EAEL,QAFYa,EAAGnD,GAAUuC,MACvBa,GAAcA,EAAUlN,QAAU6M,EAAa7M,eACjD,IAAAiN,OAAA,EAFeA,EAEbnI,GACCsH,GACFY,EAAaJ,KAAKR,EAEtB,KAGFP,EAAyBA,EAAuBf,QAC7CoC,IAAeF,EAAavQ,SAASyQ,EAAUpI,MAGlDvJ,QAAQC,IAAI,qCAAsCwR,GAIlDzR,QAAQC,IAAI,mCAAoCqQ,GAChDtQ,QAAQC,IAAI,4BAA6BmQ,GACzCpQ,QAAQC,IAAI,iBAAkBkQ,GAC9BnQ,QAAQC,MAGR,MAAM2R,QAAeC,EAAAA,EAAAA,IACnB1B,EACAC,EACAE,EACAzB,GACoC,QAD7BoB,EACPvO,GAAkBC,0BAAkB,IAAAsO,GAAM,QAANC,EAApCD,EAAsCrO,YAAI,IAAAsO,OAAN,EAApCA,EAA4CrO,MAAM,GAAG2H,SACrD+E,GACAK,GACA5K,GACAyN,EACApB,EACAjC,IAGF,GAAIwD,EAAOE,QAAS,CAClBrF,IAAgB,GAChBzM,QAAQC,IAAI,eAAgB2R,GACA,KAAxBA,EAAOG,cAA8C,MAAvBH,EAAOG,aACvCrS,GAAiBsS,EAAAA,IAGjBrS,GHxhB8BsS,KACpC,IAAKA,EAAc,MAAO,qBAE1B,MAAMC,EAAcD,EACjBrR,MAAM,MACN2O,QAAQ4C,GAAuB,KAAfA,EAAIC,SAOvB,OACErP,EAAAA,EAAAA,MAAA,OACEC,MAAO,CACLqP,WAAY,OACZ3O,OAAQ,OACR4O,SAAU,WACVC,aAAc,QACd3P,SAAA,EAEFT,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,aACRT,EAAAA,EAAAA,KAAA,UACEyB,QAhBa4O,KACjB,MAAMC,EAAaP,EAAYrP,KAAKsP,GAAG,KAAAlB,OAAUkB,KAAOO,KAAK,MAC7DC,UAAUC,UAAUC,UAAUJ,IAe1BzP,MAAO,CACLsP,SAAU,WACVQ,MAAO,OACPC,IAAK,QACLC,WAAY,OACZC,OAAQ,OACRvP,OAAQ,UACRwP,SAAU,OACV9P,MAAO,QACPR,UAEFT,EAAAA,EAAAA,KAACgR,EAAAA,IAAS,CAAC1P,KAAM,QAEnBtB,EAAAA,EAAAA,KAAA,MAAAS,SACGsP,EAAYrP,KAAI,CAACsP,EAAKiB,KACrBjR,EAAAA,EAAAA,KAAA,MAAAS,SAAiBuP,GAARiB,WGifIC,CAAsBzB,EAAOG,cAAe,CACzDuB,WAAW,IAGf,IAAIC,EAAW,GACf,GAAI3B,EAAO4B,UAAYC,OAAOC,KAAK9B,EAAO4B,UAAU1R,OAAS,EAAG,CAC9D,IAAI6R,EH/jBL,SACLC,EACAhI,EACA0E,EACA9B,GA0BA,OAxBAxO,QAAQC,IAAI,uBAAwB2L,GACpC5L,QAAQC,IAAI,qBAAsBuO,GAClCoF,EAASnD,SAAStD,IACE,QAAdA,EAAKnJ,MAGPsM,EAAyBA,EAAuBf,QAC7CzM,GAAUA,EAAM2B,QAAU0I,EAAK1I,QAI7B+J,EAAYxN,MAAM8B,GAAUA,EAAM2B,QAAU0I,EAAK1I,SACpD+J,EAAY6C,KAAKlE,IAEI,WAAdA,EAAKnJ,OAEdsM,EAAyBA,EAAuBzN,KAAKC,GACnDA,EAAM2B,QAAU0I,EAAK1I,OAAK2I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQtK,GAAK,IAAEqC,KAAM,UAAYrC,QAO1D,CAAEwN,yBAAwB9B,cACnC,CGgiBuBqF,CACbjC,EAAO4B,SACP5H,EACA0E,EACA9B,IAEFxO,QAAQC,IAAI,eAAgB0T,GACxBA,IACF1H,EAAc0H,EAASnF,aAEvB+E,EAAWI,EAASrD,uBAExB,MACEiD,EAAWjD,EAGTiD,IAEF1H,EAAiB0H,GACjBvD,GAA6BuD,GAEjC,MACE9G,IAAgB,GAChB9M,GAAemU,EAAAA,MAQnB5T,EAAAA,EAAAA,YAAU,KACHoO,IACH9C,MAED,CAAC8C,GAAW9C,KAGftL,EAAAA,EAAAA,YAAU,KACRqM,GAAkB4B,MACjB,CAACA,KAGJ,MAAM4F,IAAeC,EAAAA,EAAAA,UAAQ,IAEvBlQ,EADY,kBAATE,GACUkI,EACAN,EADoB5H,GAAMC,KAE1C,CAACiI,EAAoBN,EAAe5H,GAAMC,KAEvCgQ,IAAkBD,EAAAA,EAAAA,UACtB,IHtsB+BhI,IAC5BA,EACEA,EAAWnJ,KAAKC,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO2B,QAAS,UAFb,GGqsBhByP,CAAmBlI,IACzB,CAACA,IAEHhM,QAAQC,IAAI,wCAAyCgU,IAGrD,MAAMtE,IAAWqE,EAAAA,EAAAA,UACf,IH5wBwBtS,KAC1B,IAAKA,IAAsBA,EAAkBiO,SAC3C,OAAO,KAGT,MAAMxC,EAAOzL,EAAkBiO,SAE/B,IAAIA,EAAW,CACblL,MAAO0I,EAAKgH,OAAS,MACrBnQ,KAAMmJ,EAAKiE,MAAQ,MACnB,iBAAkBjE,EAAK,mBAAqB,MAC5CiH,MAAOjH,EAAKkH,OAAS,MACrB,4BAA6BlH,EAAK,8BAAgC,MAClEmH,YAAanH,EAAKmH,aAAe,MACjC,mBAAoBnH,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCoH,SACEpH,EAAKoH,UACL,uHAOJ,MAJkB,aAAdpH,EAAKiE,OACPzB,EAAS6E,IAAMrH,EAAKqH,KAAO,MAC3B7E,EAAS,cAAgBxC,EAAK,eAAiB,OAE1CwC,GGkvBC8E,CAAY/S,KAClB,CAACA,KAEH1B,QAAQC,IAAI0P,KAsBZzP,EAAAA,EAAAA,YAAU,KACJ6T,GAAajS,QAAU,IACzB9B,QAAQC,IAAI,kBAAmB8T,IAC/BpI,EAAaoI,IACbrI,GAAagE,GAAYA,EAAU,OAEpC,CAACqE,MAEJ7T,EAAAA,EAAAA,YAAU,KACRyM,KAAyBgD,MACxB,CAACA,KAGJ,MAAMlI,IAAUuM,EAAAA,EAAAA,UACd,IH7uBwBU,EAAClQ,EAAQR,EAAMvB,EAAcC,KACvD1C,QAAQC,IAAI,iBAAkB+D,GACjB,kBAATA,EACK,CACL,CAAEqB,YAAa,WAAYC,OAAQ,aACnC,CACED,YAAa,QACbC,OAAQ,QACRqP,KAAMC,IAAA,IAAC,IAAErH,GAAKqH,EAAA,OACZzS,EAAAA,EAAAA,KAACE,EAAa,CACZE,OAAQgL,EAAIsH,SAASzQ,MACrB5B,OAAQ+K,EAAIsH,SAASvQ,OACrB7B,aAAcA,EACdC,kBAAmBA,OAOtB,CACL,CAAE2C,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,MAAOC,OAAQ,OAC9B,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,gBAAiBC,OAAQ,iBACxC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,kBAAmBC,OAAQ,UAC1C,CACED,YAAa,OACbC,OAAQ,QAGV,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,gBGwsB/BoP,CAAalQ,EAAQR,GAAMvB,GAAcC,KAC/C,CAAC8B,GAAQR,GAAMvB,GAAcC,KAGzBkD,IAAeoO,EAAAA,EAAAA,UAAQ,IAAM5O,GAAe,KAuClDlF,EAAAA,EAAAA,YAAU,KACRF,QAAQC,IAAI,mCAAoC,CAC9CJ,UACAsO,wBACAG,iBAED,CAACzO,EAASsO,GAAsBG,KAEnC,MAAMrG,GAAcA,KAElBkD,EAAiB,MACjBY,EAAiB,MACjBR,EAAoB,IACpBF,GAAmB,GACnBM,EAAa,IACbM,EAAc,IACdE,EAAsB,IACtBN,EAAiB,IACjBmE,GAA6B,IAC7BtE,EAAY,GAEZU,GAAuB,GAGnBvE,GAAaR,UACfQ,GAAaR,QAAQyN,MAAQ,IAI/BzI,IAA0B,IAgC5B,OACEtJ,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,CAGG4J,KAAgBrK,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEtBkM,KAAczO,IAAYyM,KAC1BnK,EAAAA,EAAAA,KAAA,OACEa,MAAO,CACLsF,OAAQ,OACRpF,QAAS,OACT6R,cAAe,SACfC,eAAgB,gBAChB1C,SAAU,YACV1P,UAEFT,EAAAA,EAAAA,KAAC8S,EAAoB,CACnBrN,sBA33BsBsN,KAC7BC,EAAAA,EAAAA,IACCD,EACA3J,EACAF,EACA1L,GACAD,GACAyL,EACAY,EACAM,IACA+I,SAAQ,KACR3I,IAAgB,MAKlBL,GAAuB,IA42BfvE,aAAcA,GACdC,oBAAqBA,EACrBC,aA9CWxH,UACnB,GAAK2K,EAAL,CAKAuB,IAAgB,GAGhB,UACQ4I,EAAAA,EAAAA,IACJnK,EACAL,EACAC,EACA7C,GAEJ,CAAE,MAAOlG,GACP/B,QAAQ+B,MAAM,yBAA0BA,EAC1C,CAAC,QACC0K,IAAgB,EAClB,CAGAJ,IAA0B,EAnB1B,MAFE1M,GAAe,yDA6CTqI,uBAAwBA,EACxBC,YAAaA,OA+ElBqG,KACCvL,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,CAEG/C,IAAWsC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACnBD,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,qCAAoC1D,UACjDG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,UAAS1D,SAAA,EACtBT,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,YAAW1D,UACxBT,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJG,IAAI,+DACJC,IAAI,YACJlC,UAAU,YACV1C,QAlNQ0R,KACtB9J,IAEAqB,IAAS0I,EAAAA,EAAAA,KAAa,IACtB1I,IACE2I,EAAAA,EAAAA,IAAqB,CACnB7F,SAAU,CAAC,EACX8F,cAAe,GACfC,SAAU,GACV/T,mBAAoB,MAGxBkL,IACE8I,EAAAA,EAAAA,IAAmB,CACjBpH,UAAW,GACXI,sBAAuB,GACvBF,aAAc,GACdG,gBAAiB,GACjBpK,QAAQ,EACRqK,QAAS,CAAC,EACVT,gBAAiB,GACjBnK,OAAQ,CAAC,KAGb4I,IACE+I,EAAAA,EAAAA,IAAuB,CACrBhI,cAAe,GACfG,YAAa,GACbG,WAAW,EACXD,UAAW,CAAC,KAIhBtC,EAAa,IACbgB,IAAuB,QAoLZgD,KACCxN,EAAAA,EAAAA,KAAC0T,EAAAA,EAAmB,CAClBjU,KAAM+N,GACNmG,WAAW,yBAOlBxJ,IACCnK,EAAAA,EAAAA,KAAA,OAAKmE,UAAU,yBAAwB1D,UACrCT,EAAAA,EAAAA,KAACC,EAAAA,EAAM,OAGTD,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAC,UACEG,EAAAA,EAAAA,MAAA,OAAKuD,UAAU,cAAa1D,SAAA,EAC1BT,EAAAA,EAAAA,KAAC4T,EAA+B,CAC9BpQ,WAAYsO,GACZrO,aAAcA,GACdpB,OAAQA,GACRe,WA9zBIhF,UASlB,GARA0K,GAAiB,GACjBjL,QAAQC,IAAI,gBAAiB2B,GAC7B5B,QAAQC,IAAI,gCAAiC8D,GAC7C/D,QAAQC,IAAI,0BAA2B2B,GACvC5B,QAAQC,IAAI,mBAAoB2N,IAEhClC,GAAagE,GAAYA,EAAU,IAEtB,kBAAT1L,GACFhE,QAAQC,IAAI,gCAEZkM,GAAuB6J,GACdA,EAAKnT,KAAK0K,IAKf,KAH+B,IAA7BG,GAAkB5L,QAClB4L,GAAkB1M,MAAMiV,GAAMA,EAAE3R,SAAWiJ,EAAIjJ,UAE9B,OAAOiJ,EAE1B,MAAM2I,EAAWtI,GAAckD,MAAMmF,GAAMA,EAAE3R,SAAWiJ,EAAIjJ,SACtD6R,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAU7R,aAAc,GACtC+R,EAAiB7I,EAAIlJ,YAAc,GAEnCgS,EAAwBD,EAAevT,KAAKyT,GAE9CxQ,IACAlE,EAAKV,SAASoV,EAAGhT,UAAU8O,SAC3B+D,EAAYnV,MACTuV,GAAOA,EAAGjT,UAAU8O,SAAWkE,EAAGhT,UAAU8O,UAGzBhF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQkJ,GAAE,IAAElT,MAAO,QAAUkT,IAGjDE,EAAiB,GA+BvB,OA7BA5U,EAAK6O,SAAShD,IACZ,MAAMgJ,EAAe3I,GAAYgD,MAAMhO,GACdA,EAAM2B,MAC1BsK,QAAQ,YAAa,IACrBqD,SACuB3E,EAAU2E,SAGtC,IAAKqE,EAAc,OAEnB,MAAMC,EAAgBP,EAAYnV,MAC/BuV,GAAOA,EAAGjT,UAAU8O,SAAW3E,EAAU2E,SAGtBgE,EAAepV,MAClCsV,GAAOA,EAAGhT,UAAU8O,SAAW3E,EAAU2E,UAI1CoE,EAAenF,MAAIjE,EAAAA,EAAAA,GAAC,CAClB9J,UAAWmK,EACX5J,QAAS4S,EAAalN,GACtBhG,eAAgB,WAEZmT,EAAgB,CAAEtT,MAAO,OAAU,CAAEA,MAAO,eAKtDgK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKG,GAAG,IACNlJ,WAAY,IAAIgS,KAA0BG,cAI3C,CACL/J,IAAgB,GAChBzM,QAAQC,IAAI,yCAIZ,IAAK,IAAD0W,EAAAC,EACF,MAAM,YAAEC,EAAW,aAAE9E,SAAuB+E,EAAAA,EAAAA,IAC1ClV,EACA2M,GACoC,QAD3BoI,EACTjV,GAAkBC,0BAAkB,IAAAgV,GAAM,QAANC,EAApCD,EAAsC/U,YAAI,IAAAgV,OAAN,EAApCA,EAA4C/U,MAAM,GAAG2H,SACrDxF,GACAoK,GACAQ,GACAkB,IAEF9P,QAAQC,IAAI,kCAAmC4W,GAC/C7W,QAAQC,IAAI,mCAAoC8R,GAGhD,MAAMgF,EAAgBF,EAAYhU,KAC/BsK,IAAI,IAAA6J,EAAA,OAAyD,QAAzDA,EAAKzI,GAAUuC,MAAMhO,GAAUA,EAAMyG,KAAO4D,EAAK8J,iBAAQ,IAAAD,OAAA,EAApDA,EAAsDvS,SAElEzE,QAAQC,IAAI,kBAAmB8W,GAG/B,MAAMG,EAActV,EAAK2N,QACtBzM,IAAWiU,EAAc7V,SAAS4B,EAAM2B,SAErC0S,EAAgBvV,EAAK2N,QAAQzM,GACjCiU,EAAc7V,SAAS4B,EAAM2B,SAE/BzE,QAAQC,IAAI,gBAAiBiX,GAC7BlX,QAAQC,IAAI,kBAAmBkX,GAG3BA,EAAcrV,OAAS,IAErBiQ,GACFjH,EAA2BiH,EAAc,CAEvC,GAIJ/R,QAAQC,IAAI,mCAAoC8R,IAIlD9F,GAAemL,GAAmB,IAC7BA,KACAD,EAActU,KAAKC,IAAK,CAAQ2B,MAAO3B,EAAM2B,aAI9CyS,EAAYpV,OAAS,IACvB6J,GAAcqK,GAAS,IAClBkB,EAAYrU,KAAIwU,IAAA,IAAC,MAAE5S,GAAgB4S,EAANC,GAAIC,EAAAA,EAAAA,GAAAF,EAAAG,GAAA,OAAApK,EAAAA,EAAAA,GAAA,CAClChJ,MAAOK,GACJ6S,SAEFtB,KAELtK,GAAagE,GAAYA,EAAU,IACnC7E,EAA6B,8BAEjC,CAAE,MAAO9I,GACP/B,QAAQ+B,MAAM,6BAA8BA,GAC5C+I,EAA2B,0CAC7B,CAAC,QAEC2B,IAAgB,EAClB,CACF,GA8qBcjH,WA3qBM5D,IACpB5B,QAAQC,IAAI,mCAAoC2B,GAChD,MAAM6V,EAAmBxD,GAAgB1E,QACtChC,IACE3L,EAAKkP,MAAM4G,GAAgBA,IAAgBnK,EAAI,uBAGpD,GADAvN,QAAQC,IAAI,mCAAoCwX,GAC5CA,EAAkB,CACpB,MAAME,EAAkBF,EAAiB5U,KAAKsK,IAAI,CAChD1I,MAAO0I,EAAK,uBAGdnN,QAAQC,IAAI0X,GACZ1L,EAAc0L,EAChB,GA8pBclS,OAj+BGlF,UAMjB,GALAP,QAAQC,IAAI,sCAAuC8D,GAEnDsJ,GAAiBtJ,GACjB0I,IAAgB,GAEH,kBAATzI,GACF,IAAgB,IAAZ8B,GAAkB,CACpB9F,QAAQC,IAAI,gCACZ,MAAM0T,QAAiBiE,EACrB7T,EACArC,GACAkM,IAIF,GADA5N,QAAQC,IAAI,8BAA+B0T,GACvCA,EAAU,CACZ,MAAMkE,EAAmB9T,EAAUlB,KAAK6N,IACtC,MAAMoH,EAAelK,GAAckD,MAChC3D,GAASA,EAAK7I,SAAWoM,EAAUpM,SAGtC,MAAO,CACLA,OAAQoM,EAAUpM,OAClByT,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB7T,UAAWuM,EAAUxM,SACrBG,WAAYqM,EAAUtM,MAAMvB,KAAIP,IAAA,IAAC,UAAEgB,EAAS,QAAEO,GAASvB,EAAA,MAAM,CAC3DgB,YACAO,kBAKNgJ,IAASoL,EAAAA,EAAAA,IAAiBJ,IAE1BpL,IAAgB,EAClB,MACEzM,QAAQoB,KAAK,2BACbqL,IAAgB,EAEpB,KAAO,CACLzM,QAAQC,IAAI,8BAEZ,MAAM0T,QAAiBuE,EACrBnU,EACArC,GACAkM,IAIF,GADA5N,QAAQC,IAAI,8BAA+B0T,GACvCA,EAAU,CAAC,IAADwE,EAAAC,EACZ,MAAMP,EAAmB9T,EAAUlB,KAAK6N,IACtC,MAAMoH,EAAelK,GAAckD,MAChC3D,GAASA,EAAK7I,SAAWoM,EAAUpM,SAGtC,MAAO,CACLA,OAAQoM,EAAUpM,OAClByT,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB7T,UAAWuM,EAAUxM,SACrBG,WAAYqM,EAAUtM,MAAMvB,KAAI+R,IAAA,IAAC,UAAEtR,EAAS,QAAEO,GAAS+Q,EAAA,MAAM,CAC3DtR,YACAO,kBAKNgJ,IAASoL,EAAAA,EAAAA,IAAiBJ,IAG1B,MAAMQ,EAC+D,QADnDF,EAChB5W,EAAAA,EAAMC,WAAWC,cAAcC,kBAAkBC,0BAAkB,IAAAwW,GAC3D,QAD2DC,EAAnED,EACIvW,YAAI,IAAAwW,OAD2D,EAAnEA,EACUvW,MACI,OAAZwW,QAAY,IAAZA,GAAAA,EAAcvW,cACVE,EAAAA,EAAAA,GAAkBqW,EAAc7Y,IAGxCiN,IAAgB,EAClB,MACEzM,QAAQoB,KAAK,2BACbqL,IAAgB,EAEpB,YAEMhH,GAAO1B,IA44BD2B,SAz4BKnF,UACnB,GAAa,kBAATyD,GACFhE,QAAQC,IAAI,uCACZ2M,IAAiBoJ,IAAUA,SAK3B,GAHAhW,QAAQC,IAAI,uBAAwByN,IACpC1N,QAAQC,IAAI,4CAA6C8D,GAErD2J,GAAkB5L,OAAS,EAAG,CAAC,IAADwW,EAAAC,EAEhC,MAAMC,EAAiB9K,GAAkB7K,KAAK0K,GAAQA,EAAInJ,QAC1DpE,QAAQC,IAAI,mBAAoBuY,GAChC,MAAMC,EAAgBD,EAAe3V,KAAK4B,IAAK,CAC7CA,MAAOA,MAETzE,QAAQC,IAAI,kBAAmBwY,GAC/B,MAAMhB,EAAmB1T,EAAUwL,QAChChC,IAASiL,EAAetX,SAASqM,EAAInJ,SAExCpE,QAAQC,IAAI,kBAAmBuP,IAC3BA,KACF7D,EAAa8L,GACb/L,GAAagE,GAAYA,EAAU,KAKrCzD,GAAeyM,GAAqB,IAC/BA,KACAD,KAGL5N,EACE,qDAEI8N,EAAAA,EAAAA,IACJpK,GACAkK,EACoC,QADvBH,EACb5W,GAAkBC,0BAAkB,IAAA2W,GAAM,QAANC,EAApCD,EAAsC1W,YAAI,IAAA2W,OAAN,EAApCA,EAA4C1W,MAAM,GAAG2H,SACrDxF,GAEJ,MACE8G,EAA2B,8CAg2BjBjF,MAAOA,GACP7B,KAAMA,GACN8B,QAASA,GACT7B,OAAQA,MAEV9B,EAAAA,EAAAA,KAACyW,EAAAA,EAAa,CAEZhX,KAAMmC,EACN0D,QAASA,GAETqO,WAAW,2BAJNrK,YAgBjBtJ,EAAAA,EAAAA,KAAC0W,EAAAA,EAAkB,CACjB9R,KAAMqE,EACNpE,OAAQA,IAAMqE,GAAmB,GACjCyN,OAAQxN,QAQHsM,EAAgCrX,MAC3CwD,EACArC,EACAkM,KACI,IAADmL,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAArX,EAAkBC,0BAAkB,IAAAoX,GAAM,QAANC,EAApCD,EAAsCnX,YAAI,IAAAoX,GAAO,QAAPC,EAA1CD,EAA4CnX,aAAK,IAAAoX,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDtJ,EAAWjO,EAAkBiO,UAAY,CAAC,EAE1CwJ,EAAU,CACdC,QAASzJ,EAASwE,MAClBkF,KAAMH,EAAW1P,SACjB8P,eAAgB3J,EAAS4J,aACzBC,cAAe7J,EAAS,uBACxB8J,QAAS,WACTC,MAAO3V,EAAUlB,KAAKsK,IACpB,MAAMwM,EAAY/L,EAAckD,MAAM8I,GAAOA,EAAGtV,SAAW6I,EAAK7I,SAEhE,MAAO,CACLA,OAAQ6I,EAAK7I,OACbyT,UAAmB,OAAT4B,QAAS,IAATA,OAAS,EAATA,EAAW5B,WAAY,eACjCC,WAAoB,OAAT2B,QAAS,IAATA,OAAS,EAATA,EAAW3B,YAAa,UACnC7T,UAAWgJ,EAAKjJ,SAChBG,WAAY8I,EAAK/I,MAAMmL,QAAQzM,GAAUA,EAAMM,QAC5CP,KAAKC,IACJ,MAAM,MAAEM,GAAmBN,EAATwU,GAAIC,EAAAA,EAAAA,GAAKzU,EAAK+W,GAChC,OAAAzM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKkK,GAAI,IACPwC,UAAqB,UAAV1W,EAAoB,MAAQ,gBAMnDpD,QAAQC,IAAI,4BAA6BkZ,GAIzC,IAEE,aADuBY,EAAAA,EAAAA,IAAU,OAHjC,gFAGkDZ,EAEpD,CAAE,MAAOpX,GAEP,MADA/B,QAAQ+B,MAAM,+BAAgCA,GACxCA,CACR,GAGWmW,EAAmB3X,MAC9BwD,EACArC,EACAkM,KACI,IAADoM,EAAAC,EAAAC,EACH,MAAMhB,GACgC,QAApCc,EAAAtY,EAAkBC,0BAAkB,IAAAqY,GAAM,QAANC,EAApCD,EAAsCpY,YAAI,IAAAqY,GAAO,QAAPC,EAA1CD,EAA4CpY,aAAK,IAAAqY,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDvK,EAAWjO,EAAkBiO,UAAY,CAAC,EAE1CwJ,EAAU,CACdC,QAASzJ,EAASwE,MAClBkF,KAAMH,EAAW1P,SACjB8P,eAAgB3J,EAAS4J,aACzBC,cAAe7J,EAAS,uBACxB8J,QAAS,WACTC,MAAO3V,EAAUlB,KAAKsK,IACpB,MAAMwM,EAAY/L,EAAckD,MAAM8I,GAAOA,EAAGtV,SAAW6I,EAAK7I,SAEhE,MAAO,CACLA,OAAQ6I,EAAK7I,OACbyT,UAAmB,OAAT4B,QAAS,IAATA,OAAS,EAATA,EAAW5B,WAAY,eACjCC,WAAoB,OAAT2B,QAAS,IAATA,OAAS,EAATA,EAAW3B,YAAa,UACnC7T,UAAWgJ,EAAKjJ,SAChBiW,UAAmB,OAATR,QAAS,IAATA,OAAS,EAATA,EAAWQ,WAAY,MACjC9V,WAAY8I,EAAK/I,MAAMvB,KAAKC,IAAW,IAADsX,EACpC,MAAMtC,EAAelK,EAAckD,MAChCuJ,GAAOA,EAAG/V,SAAW6I,EAAK7I,SAEvBgW,EAA4B,OAAZxC,QAAY,IAAZA,GAAwB,QAAZsC,EAAZtC,EAAczT,kBAAU,IAAA+V,OAAZ,EAAZA,EAA0BpZ,MAC7CqO,GAAMA,EAAExL,UAAYf,EAAMe,UAGvB0W,EAA8B,UAAhBzX,EAAMM,MACpBoX,EAAiC,QAAhB1X,EAAMM,MAG7B,OAAIkX,GAAiBE,EACZ,CACLlX,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACfiW,UAAW,UAKXQ,IAAkBE,EACb,CACLlX,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACfiW,UAAW,KAKVQ,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACLjX,UAAWR,EAAMQ,UACjBO,QAASf,EAAMe,QACfiW,UAAW,OAIR,QACNvK,OAAOkL,cAKhBza,QAAQC,IAAI,sCAAuCkZ,GAKnD,IAEE,aADuBY,EAAAA,EAAAA,IAAU,OAHjC,qFAGkDZ,EAEpD,CAAE,MAAOpX,GAEP,MADA/B,QAAQ+B,MAAM,+BAAgCA,GACxCA,CACR,GCruCF,IAAI2Y,EAAO,KAuFI,SAAS,IAGtB,GAAIva,OAAOC,OAAQ,CAGjB,IAAIua,GAAe,EAEnBxa,OAAOC,OAAOE,SAAS,UAAU,KAC3Bqa,EACF3a,QAAQoB,KACN,+EAIJuZ,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzC5a,OAAO4a,YAAcA,KAIvB,IAAIC,GACW,QAAbJ,EAAAza,OAAOC,cAAM,IAAAwa,GAAM,QAANC,EAAbD,EAAeK,YAAI,IAAAJ,OAAN,EAAbA,EAAqBK,cAAc,WACnCrR,SAASsR,eAAe,QAGrBH,IACHA,EAAcnR,SAASC,cAAc,OACrCkR,EAAYzR,GAAK,OACbpJ,OAAOC,QAAUD,OAAOC,OAAO6a,KACjC9a,OAAOC,OAAO6a,KAAKG,YAAYJ,GAG/BnR,SAASoR,KAAKG,YAAYJ,IAOzBN,IAEHA,EAAOW,EAAAA,WAAoBL,IAK7BN,EAAKY,QACHvY,EAAAA,EAAAA,MAACwY,EAAAA,GAAQ,CAACha,MAAOA,EAAAA,EAAMqB,SAAA,EACrBT,EAAAA,EAAAA,KAAC5C,EAAe,KAChB4C,EAAAA,EAAAA,KAACyI,EAAe,KAChBzI,EAAAA,EAAAA,KAACqZ,EAAAA,GAAc,OAMrB,CAiEMC,MAEJ,MACEzb,QAAQ+B,MACN,sEAGN,EArEA,WA2BE,GAAI5B,OAAOub,QAAUvb,OAAOub,OAAO7R,SAAU,CAC3C,IAAI8R,EAAiBxb,OAAOub,OAAO7R,SAASC,cAAc,UAC1D6R,EAAeC,YA1BE,y1BA2BjBzb,OAAOub,OAAO7R,SAASoR,KAAKG,YAAYO,EAE1C,MACE3b,QAAQoB,KAAK,qFAEjB,CAGAya,E","sources":["pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","useState","console","log","useEffect","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","data","items","length","error","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","PlantRenderer","_ref","plants","itemId","isRemoveMode","handleRemovePlant","_Fragment","children","map","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","onClick","PlantID","getTableData","tableData","type","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","state","isMFGCA","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","objectId","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","PlantAssignment","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","securityContext1","getValue","useCallback","plantId","item","_objectSpread","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find2","finalObj","classid","find","classitem","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","cell","_ref2","original","value","flexDirection","justifyContent","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}