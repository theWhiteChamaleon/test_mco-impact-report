{"version":3,"file":"static/js/932.e57e3ddb.chunk.js","mappings":"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","sources":["components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","className","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","isDragging","style","opacity","position","top","CSS","Transform","toString","transition","width","getSize","zIndex","cursor","backgroundColor","_jsxs","ref","children","_jsx","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","widgetType","console","log","warn","data","editable","meta","type","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","_Fragment","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","line","isAutoTriggeredRefresh","latestDraggedData","store","droppedObject","droppedObjectData","initialDraggedData","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","PlantName","PlantERPStatus","AiOutlineClose","marginLeft","PlantID","getTableData","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","_availablePlantRef$cu","addPlant","AvailablePlant","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","FontAwesomeIcon","icon","faRotateLeft","PlantAssignment","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","securityContext1","useCallback","plantId","item","extractPlantData","plantData","itemName","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","find","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","flexDirection","justifyContent","DragAndDropComponent","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}